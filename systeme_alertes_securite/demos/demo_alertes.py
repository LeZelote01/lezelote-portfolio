#!/usr/bin/env python3
"""
Script de d√©monstration pour le Syst√®me d'Alertes S√©curit√©
Permet de tester toutes les fonctionnalit√©s avec des sc√©narios r√©alistes
"""

import os
import sys
import json
import time
import threading
import tempfile
from datetime import datetime, timedelta
from colorama import init, Fore, Style

# Initialiser colorama
init(autoreset=True)

# Ajouter le chemin du module
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from alertes_securite import SystemeAlertes, Alerte
from webapp import init_systeme_alertes

def demo_complete():
    """D√©monstration compl√®te de toutes les fonctionnalit√©s"""
    print(f"{Fore.BLUE}üö® D√âMONSTRATION COMPL√àTE - SYST√àME D'ALERTES S√âCURIT√â")
    print("=" * 70)
    
    # Cr√©er une configuration et base de donn√©es temporaires
    temp_db = tempfile.NamedTemporaryFile(delete=False, suffix='_demo.db')
    temp_db.close()
    
    temp_config = tempfile.NamedTemporaryFile(delete=False, suffix='_demo.json', mode='w')
    config_demo = {
        "email": {
            "enabled": True,
            "smtp_server": "smtp.gmail.com",
            "smtp_port": 587,
            "username": "demo@exemple.com",
            "password": "demo_password",
            "destinataires": ["admin@exemple.com", "security@exemple.com"]
        },
        "telegram": {
            "enabled": True,
            "token": "DEMO_BOT_TOKEN",
            "chat_ids": [123456789, -987654321]
        },
        "webhook": {
            "enabled": True,
            "url": "https://hooks.slack.com/services/DEMO/WEBHOOK/URL",
            "headers": {
                "Content-Type": "application/json",
                "Authorization": "Bearer DEMO_TOKEN"
            }
        },
        "monitoring": {
            "log_directories": ["./demo_logs", "/tmp/demo_logs"],
            "system_monitoring": True,
            "check_interval": 10
        },
        "regles": [
            {
                "id": "failed_login_demo",
                "nom": "Tentatives de connexion √©chou√©es (D√©mo)",
                "actif": True,
                "source": "log_file",
                "pattern": "(failed password|authentication failure|login failed)",
                "niveau": "WARNING",
                "description": "D√©tecte les tentatives de connexion √©chou√©es dans les logs syst√®me",
                "canaux": ["email", "telegram"],
                "cooldown": 120
            },
            {
                "id": "brute_force_demo",
                "nom": "Attaque par force brute (D√©mo)",
                "actif": True,
                "source": "log_file",
                "pattern": "repeated failed.*from.*[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+",
                "niveau": "ERROR",
                "description": "D√©tecte les attaques par force brute SSH/FTP",
                "canaux": ["email", "telegram", "webhook"],
                "cooldown": 300
            },
            {
                "id": "sql_injection_demo",
                "nom": "Tentative d'injection SQL (D√©mo)",
                "actif": True,
                "source": "log_file",
                "pattern": "(union select|drop table|insert into|update.*set|delete from)",
                "niveau": "CRITICAL",
                "description": "D√©tecte les tentatives d'injection SQL dans les logs web",
                "canaux": ["email", "telegram", "webhook"],
                "cooldown": 60
            },
            {
                "id": "cpu_high_demo",
                "nom": "CPU √âlev√© (D√©mo)",
                "actif": True,
                "source": "system",
                "pattern": "CPU_HIGH",
                "niveau": "WARNING",
                "description": "CPU utilisation > 90% pendant plus d'une minute",
                "canaux": ["telegram"],
                "cooldown": 300
            },
            {
                "id": "disk_full_demo",
                "nom": "Disque Plein (D√©mo)",
                "actif": True,
                "source": "system",
                "pattern": "DISK_HIGH",
                "niveau": "ERROR",
                "description": "Espace disque < 10% disponible",
                "canaux": ["email", "telegram"],
                "cooldown": 600
            },
            {
                "id": "memory_leak_demo",
                "nom": "Fuite M√©moire (D√©mo)",
                "actif": True,
                "source": "system",
                "pattern": "MEMORY_HIGH",
                "niveau": "ERROR",
                "description": "Utilisation m√©moire > 95%",
                "canaux": ["email", "telegram"],
                "cooldown": 180
            }
        ]
    }
    json.dump(config_demo, temp_config, indent=2)
    temp_config.close()
    
    try:
        # 1. Initialisation du syst√®me
        print(f"\n{Fore.CYAN}üìã √âTAPE 1: Initialisation du syst√®me d'alertes")
        systeme = SystemeAlertes(db_path=temp_db.name, config_path=temp_config.name)
        print(f"{Fore.GREEN}‚úì Syst√®me initialis√© avec {len(systeme.regles_actives())} r√®gles actives")
        
        # 2. Test des r√®gles d'alerte
        print(f"\n{Fore.CYAN}üìã √âTAPE 2: Test des r√®gles d'alerte configur√©es")
        regles = systeme.regles_actives()
        
        print(f"{Fore.YELLOW}R√®gles actives:")
        for regle in regles:
            print(f"  ‚Ä¢ {regle.nom} ({regle.niveau}) - Canaux: {', '.join(regle.canaux)}")
        
        # 3. G√©n√©ration d'alertes de d√©monstration
        print(f"\n{Fore.CYAN}üìã √âTAPE 3: G√©n√©ration d'alertes de d√©monstration")
        
        scenarios_alertes = [
            {
                'id': 'demo_ssh_attack',
                'niveau': 'WARNING',
                'source': 'log:auth.log',
                'message': 'Tentatives de connexion SSH √©chou√©es d√©tect√©es',
                'details': {
                    'pattern_matched': 'failed password',
                    'source_ip': '192.168.1.100',
                    'username': 'admin',
                    'attempts': 5,
                    'time_window': '2 minutes',
                    'log_entries': [
                        'Mar  8 10:15:23 server sshd[1234]: Failed password for admin from 192.168.1.100 port 22 ssh2',
                        'Mar  8 10:15:35 server sshd[1235]: Failed password for admin from 192.168.1.100 port 22 ssh2'
                    ]
                }
            },
            {
                'id': 'demo_web_attack',
                'niveau': 'CRITICAL',
                'source': 'log:apache2/access.log',
                'message': 'Tentative d\'injection SQL d√©tect√©e',
                'details': {
                    'pattern_matched': 'union select',
                    'request_uri': '/login.php',
                    'source_ip': '192.168.1.200',
                    'user_agent': 'sqlmap/1.4.12',
                    'payload': "' UNION SELECT user,password FROM users--",
                    'response_code': 500,
                    'risk_level': 'HIGH'
                }
            },
            {
                'id': 'demo_brute_force',
                'niveau': 'ERROR',
                'source': 'log:fail2ban.log',
                'message': 'Attaque par force brute d√©tect√©e et bloqu√©e',
                'details': {
                    'pattern_matched': 'repeated failed',
                    'source_ip': '10.0.0.50',
                    'service': 'ssh',
                    'attempts': 25,
                    'time_window': '5 minutes',
                    'action': 'IP banned for 1 hour',
                    'jail': 'sshd'
                }
            },
            {
                'id': 'demo_system_cpu',
                'niveau': 'WARNING',
                'source': 'system',
                'message': 'Utilisation CPU critique d√©tect√©e',
                'details': {
                    'cpu_percent': 95.2,
                    'load_average': [3.45, 2.89, 2.12],
                    'top_processes': [
                        {'name': 'python3', 'cpu': 45.2, 'pid': 1234},
                        {'name': 'mysql', 'cpu': 23.8, 'pid': 5678},
                        {'name': 'apache2', 'cpu': 15.4, 'pid': 9012}
                    ],
                    'duration': '2 minutes',
                    'alert_threshold': '90%'
                }
            },
            {
                'id': 'demo_disk_space',
                'niveau': 'ERROR',
                'source': 'system',
                'message': 'Espace disque critique sur partition syst√®me',
                'details': {
                    'partition': '/dev/sda1',
                    'mount_point': '/',
                    'usage_percent': 94.7,
                    'free_space': '2.1 GB',
                    'total_space': '40 GB',
                    'largest_files': [
                        '/var/log/apache2/access.log (1.2 GB)',
                        '/tmp/backup.tar.gz (800 MB)',
                        '/var/lib/mysql/database.sql (650 MB)'
                    ]
                }
            },
            {
                'id': 'demo_memory_leak',
                'niveau': 'ERROR',
                'source': 'system',
                'message': 'Possible fuite m√©moire d√©tect√©e',
                'details': {
                    'memory_usage': 97.3,
                    'available_memory': '1.2 GB',
                    'total_memory': '32 GB',
                    'swap_usage': 45.6,
                    'suspect_process': {
                        'name': 'java',
                        'pid': 3456,
                        'memory_mb': 8192,
                        'uptime': '2 days 14:32:15'
                    },
                    'trend': 'increasing over 6 hours'
                }
            }
        ]
        
        alertes_creees = []
        for i, scenario in enumerate(scenarios_alertes):
            alerte = Alerte(
                id=f"{scenario['id']}_{int(time.time())}_{i}",
                timestamp=datetime.now() - timedelta(minutes=i*2),  # √âtaler dans le temps
                niveau=scenario['niveau'],
                source=scenario['source'],
                message=scenario['message'],
                details=scenario['details']
            )
            
            systeme.enregistrer_alerte(alerte)
            alertes_creees.append(alerte)
            print(f"{Fore.GREEN}‚úì Alerte cr√©√©e: {scenario['niveau']} - {scenario['message']}")
            time.sleep(0.5)  # Petite pause pour l'effet visuel
        
        print(f"{Fore.GREEN}‚úì {len(alertes_creees)} alertes de d√©monstration cr√©√©es")
        
        # 4. Test des fonctionnalit√©s de recherche et filtrage
        print(f"\n{Fore.CYAN}üìã √âTAPE 4: Test des fonctionnalit√©s de recherche et filtrage")
        
        # Toutes les alertes
        toutes_alertes = systeme.lister_alertes()
        print(f"{Fore.GREEN}‚úì Total des alertes: {len(toutes_alertes)}")
        
        # Filtrage par niveau
        alertes_critiques = systeme.lister_alertes(niveau='CRITICAL')
        alertes_erreurs = systeme.lister_alertes(niveau='ERROR')
        alertes_warnings = systeme.lister_alertes(niveau='WARNING')
        
        print(f"{Fore.YELLOW}R√©partition par niveau:")
        print(f"  ‚Ä¢ CRITICAL: {len(alertes_critiques)} alerte(s)")
        print(f"  ‚Ä¢ ERROR: {len(alertes_erreurs)} alerte(s)")
        print(f"  ‚Ä¢ WARNING: {len(alertes_warnings)} alerte(s)")
        
        # Alertes non r√©solues
        alertes_non_resolues = systeme.lister_alertes(resolu=False)
        print(f"  ‚Ä¢ Non r√©solues: {len(alertes_non_resolues)} alerte(s)")
        
        # 5. Test de r√©solution d'alertes
        print(f"\n{Fore.CYAN}üìã √âTAPE 5: Test de r√©solution d'alertes")
        
        if alertes_creees:
            # R√©soudre quelques alertes
            alertes_a_resoudre = alertes_creees[:3]
            for alerte in alertes_a_resoudre:
                success = systeme.marquer_resolu(alerte.id)
                if success:
                    print(f"{Fore.GREEN}‚úì Alerte r√©solue: {alerte.message[:40]}...")
        
        # 6. G√©n√©ration des statistiques compl√®tes
        print(f"\n{Fore.CYAN}üìã √âTAPE 6: G√©n√©ration des statistiques compl√®tes")
        
        stats = systeme.obtenir_statistiques()
        if stats:
            globales = stats['globales']
            print(f"{Fore.YELLOW}Statistiques globales:")
            print(f"  ‚Ä¢ Total: {globales['total']} alerte(s)")
            print(f"  ‚Ä¢ Critiques: {globales['critiques']}")
            print(f"  ‚Ä¢ Erreurs: {globales['erreurs']}")
            print(f"  ‚Ä¢ Warnings: {globales['warnings']}")
            print(f"  ‚Ä¢ Info: {globales['info']}")
            print(f"  ‚Ä¢ Non r√©solues: {globales['non_resolues']}")
            
            if stats['top_sources']:
                print(f"\n{Fore.YELLOW}Top sources d'alertes:")
                for source_info in stats['top_sources'][:5]:
                    print(f"  ‚Ä¢ {source_info['source']}: {source_info['count']} alerte(s)")
        
        # 7. Test des notifications (simulation)
        print(f"\n{Fore.CYAN}üìã √âTAPE 7: Test des notifications (simulation)")
        
        # Cr√©er une alerte de test pour les notifications
        alerte_notification = Alerte(
            id=f"notification_test_{int(time.time())}",
            timestamp=datetime.now(),
            niveau="WARNING",
            source="demo:notification_test",
            message="Test de notification depuis la d√©monstration",
            details={
                'demo_mode': True,
                'notification_channels': ['email', 'telegram', 'webhook'],
                'test_timestamp': datetime.now().isoformat(),
                'priority': 'medium'
            }
        )
        
        # Enregistrer l'alerte
        systeme.enregistrer_alerte(alerte_notification)
        
        # Simuler l'envoi de notifications
        print(f"{Fore.YELLOW}üìß Simulation notifications:")
        print(f"  ‚Ä¢ Email ‚Üí admin@exemple.com, security@exemple.com")
        print(f"  ‚Ä¢ Telegram ‚Üí Chat IDs: 123456789, -987654321")
        print(f"  ‚Ä¢ Webhook ‚Üí https://hooks.slack.com/services/DEMO/WEBHOOK/URL")
        print(f"{Fore.GREEN}‚úì Notifications simul√©es avec succ√®s")
        
        # 8. Test de monitoring syst√®me (simulation)
        print(f"\n{Fore.CYAN}üìã √âTAPE 8: Test de monitoring syst√®me")
        
        # Simuler des m√©triques syst√®me
        import psutil
        
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        print(f"{Fore.YELLOW}M√©triques syst√®me actuelles:")
        print(f"  ‚Ä¢ CPU: {cpu_percent:.1f}%")
        print(f"  ‚Ä¢ M√©moire: {memory.percent:.1f}% ({memory.available // (1024**3):.1f} GB libre)")
        print(f"  ‚Ä¢ Disque: {disk.percent:.1f}% ({disk.free // (1024**3):.1f} GB libre)")
        
        # Simuler des alertes syst√®me si n√©cessaire
        if cpu_percent > 50:
            print(f"{Fore.YELLOW}‚ö†Ô∏è  CPU relativement √©lev√© - une alerte serait g√©n√©r√©e √† >90%")
        if memory.percent > 70:
            print(f"{Fore.YELLOW}‚ö†Ô∏è  M√©moire relativement √©lev√©e - une alerte serait g√©n√©r√©e √† >90%")
        if disk.percent > 80:
            print(f"{Fore.YELLOW}‚ö†Ô∏è  Disque relativement plein - une alerte serait g√©n√©r√©e √† >90%")
        
        # 9. G√©n√©ration de rapport de d√©monstration
        print(f"\n{Fore.CYAN}üìã √âTAPE 9: G√©n√©ration du rapport de d√©monstration")
        
        rapport_file = "demo_rapport_alertes.json"
        rapport_data = {
            'demo_info': {
                'timestamp': datetime.now().isoformat(),
                'duration': 'demo_complete',
                'version': '1.0',
                'generated_by': 'demo_alertes.py'
            },
            'alertes_generees': len(alertes_creees),
            'regles_actives': len(regles),
            'statistiques': stats,
            'scenarios_testes': [
                'Tentatives SSH √©chou√©es',
                'Injection SQL',
                'Attaque par force brute', 
                'CPU √©lev√©',
                'Disque plein',
                'Fuite m√©moire'
            ],
            'fonctionnalites_testees': [
                'Cr√©ation d\'alertes',
                'Filtrage par niveau',
                'R√©solution d\'alertes',
                'G√©n√©ration de statistiques',
                'Simulation de notifications',
                'Monitoring syst√®me'
            ]
        }
        
        with open(rapport_file, 'w', encoding='utf-8') as f:
            json.dump(rapport_data, f, indent=2, ensure_ascii=False)
        
        print(f"{Fore.GREEN}‚úì Rapport de d√©monstration sauvegard√©: {rapport_file}")
        
        # 10. R√©sum√© final
        print(f"\n{Fore.CYAN}üìã √âTAPE 10: R√©sum√© de la d√©monstration")
        
        print(f"{Fore.GREEN}‚úÖ D√âMONSTRATION TERMIN√âE AVEC SUCC√àS!")
        
        print(f"\n{Fore.BLUE}üìä R√©sum√© final:")
        print(f"  üö® {len(alertes_creees)} alertes de d√©monstration cr√©√©es")
        print(f"  üìã {len(regles)} r√®gles d'alerte configur√©es")
        print(f"  üìà {stats['globales']['total']} alertes totales en base")
        print(f"  üîß {len(alertes_a_resoudre)} alertes r√©solues")
        print(f"  üìä Statistiques compl√®tes g√©n√©r√©es")
        print(f"  üì± Notifications simul√©es sur 3 canaux")
        print(f"  üìã Rapport de d√©monstration cr√©√©")
        
        # Lister les fichiers cr√©√©s
        print(f"\n{Fore.YELLOW}üìÅ FICHIERS CR√â√âS:")
        fichiers_demo = [
            temp_db.name,
            temp_config.name,
            rapport_file
        ]
        
        for fichier in fichiers_demo:
            if os.path.exists(fichier):
                taille = os.path.getsize(fichier)
                print(f"  ‚úì {os.path.basename(fichier)} ({taille:,} bytes)")
        
        print(f"\n{Fore.CYAN}üåê Pour tester l'interface web:")
        print(f"  python3 webapp.py --db {temp_db.name} --config {temp_config.name}")
        
        print(f"\n{Fore.CYAN}üíª Pour tester en ligne de commande:")
        print(f"  python3 alertes_securite.py --db {temp_db.name} list")
        print(f"  python3 alertes_securite.py --db {temp_db.name} stats")
        
    except Exception as e:
        print(f"{Fore.RED}‚ùå Erreur lors de la d√©monstration: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # Note: On ne supprime pas les fichiers temporaires pour permettre les tests
        print(f"\n{Fore.YELLOW}üí° Les fichiers de d√©monstration sont conserv√©s pour exploration")

def demo_notifications():
    """D√©monstration sp√©cifique des notifications"""
    print(f"\n{Fore.BLUE}üì± D√âMONSTRATION NOTIFICATIONS - SYST√àME D'ALERTES")
    print("=" * 50)
    
    # Configuration de test pour notifications
    temp_config = tempfile.NamedTemporaryFile(delete=False, suffix='_notif_demo.json', mode='w')
    config_notif = {
        "email": {
            "enabled": True,
            "smtp_server": "smtp.gmail.com",
            "smtp_port": 587,
            "username": "demo@test.com",
            "password": "demo_app_password",
            "destinataires": ["admin@entreprise.com", "security@entreprise.com"]
        },
        "telegram": {
            "enabled": True,
            "token": "123456789:ABCdefGHIjklMNOpqrsTUVwxyz",
            "chat_ids": [123456789, -987654321]
        },
        "webhook": {
            "enabled": True,
            "url": "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX",
            "headers": {
                "Content-Type": "application/json"
            }
        }
    }
    json.dump(config_notif, temp_config, indent=2)
    temp_config.close()
    
    try:
        from alertes_securite import NotificationManager
        
        # Initialiser le gestionnaire de notifications
        notif_manager = NotificationManager(config_notif)
        
        # Cr√©er des alertes de test pour chaque niveau
        alertes_test = [
            {
                'niveau': 'INFO',
                'message': 'Service d√©marr√© avec succ√®s',
                'details': {'service': 'web_server', 'port': 80, 'status': 'running'}
            },
            {
                'niveau': 'WARNING',
                'message': 'Utilisation m√©moire √©lev√©e d√©tect√©e',
                'details': {'memory_usage': 85.2, 'threshold': 80, 'process': 'database'}
            },
            {
                'niveau': 'ERROR',
                'message': '√âchec de connexion √† la base de donn√©es',
                'details': {'database': 'production', 'error': 'timeout', 'retry_count': 3}
            },
            {
                'niveau': 'CRITICAL',
                'message': 'Intrusion syst√®me d√©tect√©e - Action imm√©diate requise',
                'details': {'source_ip': '192.168.1.200', 'attack_type': 'privilege_escalation', 'affected_users': ['admin', 'root']}
            }
        ]
        
        print(f"\n{Fore.CYAN}üß™ Test des formats de notification par niveau:")
        
        for i, alerte_data in enumerate(alertes_test):
            print(f"\n{Fore.YELLOW}üì§ Test notification {alerte_data['niveau']}:")
            
            alerte = Alerte(
                id=f"notif_test_{i}_{int(time.time())}",
                timestamp=datetime.now(),
                niveau=alerte_data['niveau'],
                source="demo:notification",
                message=alerte_data['message'],
                details=alerte_data['details']
            )
            
            # Simuler l'envoi (les m√©thodes seront mock√©es en r√©alit√©)
            print(f"  üìß Email: {alerte_data['message']}")
            print(f"      ‚îî‚îÄ Destinataires: {', '.join(config_notif['email']['destinataires'])}")
            
            print(f"  üì± Telegram: {get_telegram_emoji(alerte_data['niveau'])} {alerte_data['message']}")
            print(f"      ‚îî‚îÄ Chat IDs: {', '.join(map(str, config_notif['telegram']['chat_ids']))}")
            
            print(f"  üåê Webhook: JSON payload vers Slack")
            print(f"      ‚îî‚îÄ URL: {config_notif['webhook']['url'][:50]}...")
            
            time.sleep(0.5)
        
        print(f"\n{Fore.GREEN}‚úÖ Tests de notification termin√©s")
        
        # Exemples de templates de notification
        print(f"\n{Fore.CYAN}üìù EXEMPLES DE TEMPLATES:")
        
        print(f"\n{Fore.YELLOW}üìß Template Email:")
        email_template = """
Subject: üö® Alerte S√©curit√© [CRITICAL] - Intrusion syst√®me d√©tect√©e

Alerte S√©curit√© - CRITICAL

Timestamp: 2025-03-08 10:30:45
Source: demo:notification  
Message: Intrusion syst√®me d√©tect√©e - Action imm√©diate requise

D√©tails:
{
  "source_ip": "192.168.1.200",
  "attack_type": "privilege_escalation", 
  "affected_users": ["admin", "root"]
}

Actions recommand√©es:
1. Isoler les comptes affect√©s
2. Analyser les logs de connexion
3. V√©rifier l'int√©grit√© du syst√®me
4. Contacter l'√©quipe s√©curit√©

---
Syst√®me d'Alertes S√©curit√©
        """
        print(email_template)
        
        print(f"\n{Fore.YELLOW}üì± Template Telegram:")
        telegram_template = """
üö® **Alerte S√©curit√© [CRITICAL]**

üïê **Timestamp:** 2025-03-08 10:30:45
üì° **Source:** demo:notification
üí¨ **Message:** Intrusion syst√®me d√©tect√©e - Action imm√©diate requise

üìã **D√©tails:**
```json
{
  "source_ip": "192.168.1.200",
  "attack_type": "privilege_escalation",
  "affected_users": ["admin", "root"]
}
```

‚ö° **Action imm√©diate requise!**
        """
        print(telegram_template)
        
        print(f"\n{Fore.YELLOW}üåê Template Webhook (Slack):")
        webhook_template = {
            "text": "üö® Alerte S√©curit√© Critique",
            "attachments": [
                {
                    "color": "danger",
                    "fields": [
                        {"title": "Niveau", "value": "CRITICAL", "short": True},
                        {"title": "Source", "value": "demo:notification", "short": True},
                        {"title": "Message", "value": "Intrusion syst√®me d√©tect√©e - Action imm√©diate requise"},
                        {"title": "IP Source", "value": "192.168.1.200", "short": True},
                        {"title": "Type d'attaque", "value": "privilege_escalation", "short": True}
                    ],
                    "footer": "Syst√®me d'Alertes S√©curit√©",
                    "ts": int(time.time())
                }
            ]
        }
        print(json.dumps(webhook_template, indent=2))
        
    finally:
        try:
            os.unlink(temp_config.name)
        except:
            pass

def get_telegram_emoji(niveau):
    """Retourner l'emoji appropri√© pour le niveau d'alerte"""
    emoji_map = {
        'INFO': '‚ÑπÔ∏è',
        'WARNING': '‚ö†Ô∏è', 
        'ERROR': '‚ùå',
        'CRITICAL': 'üö®'
    }
    return emoji_map.get(niveau, 'üì¢')

def demo_monitoring():
    """D√©monstration du monitoring syst√®me en temps r√©el"""
    print(f"\n{Fore.BLUE}üîç D√âMONSTRATION MONITORING - SYST√àME D'ALERTES")
    print("=" * 50)
    
    import psutil
    import tempfile
    
    # Cr√©er un dossier de logs temporaire pour la d√©mo
    temp_log_dir = tempfile.mkdtemp(prefix='demo_logs_')
    
    try:
        print(f"\n{Fore.CYAN}üñ•Ô∏è  Monitoring des ressources syst√®me:")
        
        # Monitoring CPU
        print(f"\n{Fore.YELLOW}üìä CPU:")
        for i in range(5):
            cpu_percent = psutil.cpu_percent(interval=0.5)
            cpu_count = psutil.cpu_count()
            load_avg = os.getloadavg() if hasattr(os, 'getloadavg') else (0, 0, 0)
            
            print(f"  ‚Ä¢ Utilisation: {cpu_percent:5.1f}% ({cpu_count} cores)")
            print(f"  ‚Ä¢ Load Average: {load_avg[0]:.2f}, {load_avg[1]:.2f}, {load_avg[2]:.2f}")
            
            if cpu_percent > 80:
                print(f"    {Fore.RED}‚ö†Ô∏è  Alerte CPU √©lev√© serait d√©clench√©e!")
            
            time.sleep(1)
        
        # Monitoring M√©moire
        print(f"\n{Fore.YELLOW}üíæ M√©moire:")
        memory = psutil.virtual_memory()
        swap = psutil.swap_memory()
        
        print(f"  ‚Ä¢ RAM: {memory.percent:5.1f}% ({memory.used // (1024**3):.1f}/{memory.total // (1024**3):.1f} GB)")
        print(f"  ‚Ä¢ Disponible: {memory.available // (1024**3):.1f} GB")
        print(f"  ‚Ä¢ Swap: {swap.percent:5.1f}% ({swap.used // (1024**3):.1f}/{swap.total // (1024**3):.1f} GB)")
        
        if memory.percent > 80:
            print(f"    {Fore.RED}‚ö†Ô∏è  Alerte m√©moire √©lev√©e serait d√©clench√©e!")
        
        # Monitoring Disque
        print(f"\n{Fore.YELLOW}üíΩ Stockage:")
        partitions = psutil.disk_partitions()
        
        for partition in partitions[:3]:  # Limiter √† 3 partitions
            try:
                partition_usage = psutil.disk_usage(partition.mountpoint)
                print(f"  ‚Ä¢ {partition.device} ({partition.mountpoint}):")
                print(f"    ‚îî‚îÄ {partition_usage.percent:5.1f}% ({partition_usage.used // (1024**3):.1f}/{partition_usage.total // (1024**3):.1f} GB)")
                
                if partition_usage.percent > 85:
                    print(f"      {Fore.RED}‚ö†Ô∏è  Alerte disque plein serait d√©clench√©e!")
                    
            except PermissionError:
                print(f"  ‚Ä¢ {partition.device}: Permission refus√©e")
        
        # Monitoring Processus
        print(f"\n{Fore.YELLOW}üîÑ Top Processus:")
        processes = []
        for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
            try:
                processes.append(proc.info)
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                pass
        
        # Trier par CPU et prendre les 5 premiers
        processes.sort(key=lambda x: x['cpu_percent'] or 0, reverse=True)
        
        for proc in processes[:5]:
            cpu = proc['cpu_percent'] or 0
            memory = proc['memory_percent'] or 0
            print(f"  ‚Ä¢ {proc['name']:15} (PID {proc['pid']:5}): CPU {cpu:5.1f}%, RAM {memory:5.1f}%")
        
        # Simulation de monitoring de logs
        print(f"\n{Fore.YELLOW}üìÑ Simulation monitoring de logs:")
        
        # Cr√©er des logs de test
        log_files = ['auth.log', 'syslog', 'apache2/access.log', 'fail2ban.log']
        
        for log_file in log_files:
            log_path = os.path.join(temp_log_dir, log_file)
            os.makedirs(os.path.dirname(log_path), exist_ok=True)
            
            # √âcrire des logs de d√©monstration
            with open(log_path, 'w') as f:
                if 'auth.log' in log_file:
                    f.write("Mar  8 10:15:23 server sshd[1234]: Failed password for admin from 192.168.1.100 port 22 ssh2\n")
                    f.write("Mar  8 10:15:35 server sshd[1235]: Failed password for root from 192.168.1.100 port 22 ssh2\n")
                elif 'access.log' in log_file:
                    f.write('192.168.1.200 - - [08/Mar/2025:10:30:45 +0000] "GET /login.php?id=1\' UNION SELECT user,password FROM users-- HTTP/1.1" 500 1234\n')
                elif 'fail2ban.log' in log_file:
                    f.write("2025-03-08 10:32:15,123 fail2ban.actions[1234]: NOTICE [sshd] Ban 192.168.1.100\n")
                else:
                    f.write("Mar  8 10:30:00 server kernel: [12345.678901] Out of memory: Kill process 1234 (mysql) score 123 or sacrifice child\n")
            
            print(f"  ‚Ä¢ {log_file}: {os.path.getsize(log_path)} bytes")
        
        print(f"\n{Fore.CYAN}üìÅ Dossier de logs de d√©monstration: {temp_log_dir}")
        print(f"{Fore.GREEN}‚úì Monitoring syst√®me de d√©monstration termin√©")
        
    finally:
        # Nettoyer le dossier temporaire
        import shutil
        try:
            shutil.rmtree(temp_log_dir)
        except:
            pass

def main():
    """Point d'entr√©e principal"""
    if len(sys.argv) > 1:
        mode = sys.argv[1].lower()
        
        if mode == "complete":
            demo_complete()
        elif mode == "notifications":
            demo_notifications()
        elif mode == "monitoring":
            demo_monitoring()
        else:
            print(f"{Fore.RED}Mode inconnu: {mode}")
            print(f"{Fore.CYAN}Modes disponibles: complete, notifications, monitoring")
    else:
        # Menu interactif
        print(f"{Fore.BLUE}üö® D√âMONSTRATIONS SYST√àME D'ALERTES S√âCURIT√â")
        print("=" * 50)
        
        options = {
            "1": ("D√©monstration compl√®te", demo_complete),
            "2": ("Test des notifications", demo_notifications),
            "3": ("Monitoring syst√®me", demo_monitoring),
            "4": ("Quitter", None)
        }
        
        while True:
            print(f"\n{Fore.CYAN}Choisissez une d√©monstration:")
            for key, (description, _) in options.items():
                print(f"{Fore.YELLOW}{key}. {description}")
            
            choice = input(f"\n{Fore.WHITE}Votre choix (1-4): ").strip()
            
            if choice in options:
                description, func = options[choice]
                if func is None:
                    print(f"{Fore.GREEN}Au revoir!")
                    break
                else:
                    print(f"\n{Fore.BLUE}>>> {description}")
                    func()
                    input(f"\n{Fore.WHITE}Appuyez sur Entr√©e pour continuer...")
            else:
                print(f"{Fore.RED}Choix invalide. Veuillez choisir entre 1 et 4.")

if __name__ == "__main__":
    main()