#!/usr/bin/env python3
"""
üö® SYST√àME D'ALERTES S√âCURIT√â - FICHIER PRINCIPAL UNIFI√â
=========================================================

Orchestrateur centralis√© pour toutes les fonctionnalit√©s du syst√®me d'alertes :
- Interface CLI unifi√©e avec 6 modes d'utilisation
- Gestion centralis√©e des configurations et composants  
- Architecture modulaire int√©gr√©e
- Point d'entr√©e unique pour d√©ploiement et maintenance

Modes disponibles :
- CLI      : Interface en ligne de commande
- Daemon   : Service de monitoring continu
- Web      : Dashboard web interactif  
- API      : Serveur API REST
- ML       : Machine Learning et analyse d'anomalies
- All      : Tous les services simultan√©ment

Version : 3.0.0 - Architecture Harmonis√©e
Auteur  : Syst√®me d'Intelligence Artificielle
Date    : 2025
"""

import os
import sys
import json
import time
import signal
import threading
import subprocess
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional, Any
import argparse
from colorama import init, Fore, Style

# Initialisation colorama
init(autoreset=True)

# Imports des modules du syst√®me d'alertes
try:
    from alertes_securite import SystemeAlertes, Alerte
    from ml_anomaly_detector import MLAnomalyDetector
    MODULES_DISPONIBLES = True
except ImportError as e:
    print(f"{Fore.RED}‚ùå Erreur import modules: {e}")
    MODULES_DISPONIBLES = False

class AlertesPrincipal:
    """
    Orchestrateur principal du syst√®me d'alertes s√©curit√©
    
    G√®re l'architecture int√©gr√©e avec :
    - Configuration centralis√©e
    - Services multiples (monitoring, web, API, ML)
    - Interface CLI unifi√©e
    - Gestion du cycle de vie des composants
    """
    
    def __init__(self, config_path="config.json", db_path="alertes.db"):
        self.config_path = config_path
        self.db_path = db_path
        self.config = self.charger_configuration()
        
        # Composants principaux
        self.systeme_alertes = None
        self.webapp = None
        self.api_app = None
        self.ml_detector = None
        
        # √âtat des services
        self.services_actifs = {
            'monitoring': False,
            'webapp': False,
            'api': False,
            'ml': False
        }
        
        # Thread management
        self.threads = {}
        self.running = False
        
        print(f"{Fore.BLUE}üö® SYST√àME D'ALERTES S√âCURIT√â - PRINCIPAL")
        print(f"{Fore.CYAN}   Version 3.0.0 - Architecture Harmonis√©e")
        print("=" * 50)
    
    def charger_configuration(self) -> Dict[str, Any]:
        """Charger et valider la configuration centralis√©e"""
        config_defaut = {
            "version": "3.0.0",
            "services": {
                "monitoring": {"enabled": True, "auto_start": True},
                "webapp": {"enabled": True, "port": 5000, "host": "127.0.0.1"},
                "api": {"enabled": True, "port": 5001, "host": "127.0.0.1"}, 
                "ml": {"enabled": True, "auto_train": False}
            },
            "paths": {
                "logs": "./logs",
                "models": "./ml_models",
                "temp": "./temp"
            }
        }
        
        try:
            if os.path.exists(self.config_path):
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    config_utilisateur = json.load(f)
                
                # Merger avec config par d√©faut
                config = {**config_defaut, **config_utilisateur}
                
                # Ajouter la configuration des services si manquante
                if 'services' not in config:
                    config['services'] = config_defaut['services']
                
                return config
            else:
                print(f"{Fore.YELLOW}‚ö†Ô∏è  Configuration par d√©faut utilis√©e")
                return config_defaut
                
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur chargement config: {e}")
            return config_defaut
    
    def initialiser_systeme(self):
        """Initialiser le syst√®me d'alertes principal"""
        if not MODULES_DISPONIBLES:
            print(f"{Fore.RED}‚ùå Modules non disponibles")
            return False
        
        try:
            self.systeme_alertes = SystemeAlertes(
                db_path=self.db_path,
                config_path=self.config_path
            )
            print(f"{Fore.GREEN}‚úì Syst√®me d'alertes initialis√©")
            return True
            
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur initialisation syst√®me: {e}")
            return False
    
    def initialiser_ml(self):
        """Initialiser le d√©tecteur ML"""
        if self.config.get('services', {}).get('ml', {}).get('enabled', True):
            try:
                self.ml_detector = MLAnomalyDetector(db_path=self.db_path)
                
                # Tentative de chargement des mod√®les
                if self.ml_detector.load_models():
                    print(f"{Fore.GREEN}ü§ñ Mod√®les ML charg√©s")
                else:
                    print(f"{Fore.YELLOW}ü§ñ Pas de mod√®les pr√©-entra√Æn√©s")
                
                # Auto-entra√Ænement si configur√©
                if self.config.get('services', {}).get('ml', {}).get('auto_train', False):
                    self.entrainer_ml_auto()
                
                self.services_actifs['ml'] = True
                return True
                
            except Exception as e:
                print(f"{Fore.RED}‚ùå Erreur initialisation ML: {e}")
                return False
        return True
    
    def entrainer_ml_auto(self):
        """Entra√Ænement automatique des mod√®les ML"""
        try:
            print(f"{Fore.CYAN}ü§ñ Auto-entra√Ænement ML...")
            alerts_data = self.ml_detector.load_training_data(days_back=30)
            
            if len(alerts_data) >= 100:
                self.ml_detector.train_models(alerts_data)
                print(f"{Fore.GREEN}‚úÖ Entra√Ænement ML termin√©")
            else:
                print(f"{Fore.YELLOW}‚ö†Ô∏è  Pas assez de donn√©es pour l'entra√Ænement ML")
                
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur auto-entra√Ænement ML: {e}")
    
    def demarrer_monitoring(self):
        """D√©marrer le service de monitoring"""
        if self.systeme_alertes and not self.services_actifs['monitoring']:
            try:
                self.systeme_alertes.demarrer_monitoring()
                self.services_actifs['monitoring'] = True
                print(f"{Fore.GREEN}‚úì Service monitoring d√©marr√©")
                return True
            except Exception as e:
                print(f"{Fore.RED}‚ùå Erreur d√©marrage monitoring: {e}")
                return False
        return True
    
    def demarrer_webapp(self):
        """D√©marrer l'interface web"""
        if not self.services_actifs['webapp']:
            try:
                webapp_config = self.config.get('services', {}).get('webapp', {})
                port = webapp_config.get('port', 5000)
                host = webapp_config.get('host', '127.0.0.1')
                
                def run_webapp():
                    # Initialiser le syst√®me d'alertes pour webapp
                    from webapp import init_systeme_alertes
                    init_systeme_alertes(db_path=self.db_path, config_path=self.config_path)
                    # Importer et lancer webapp
                    from webapp import socketio, app
                    socketio.run(app, host=host, port=port, debug=False, allow_unsafe_werkzeug=True)
                
                thread = threading.Thread(target=run_webapp, daemon=True)
                thread.start()
                self.threads['webapp'] = thread
                self.services_actifs['webapp'] = True
                
                print(f"{Fore.GREEN}üåê Interface web d√©marr√©e sur http://{host}:{port}")
                return True
                
            except Exception as e:
                print(f"{Fore.RED}‚ùå Erreur d√©marrage webapp: {e}")
                return False
        return True
    
    def demarrer_api(self):
        """D√©marrer l'API REST"""
        if not self.services_actifs['api']:
            try:
                api_config = self.config.get('services', {}).get('api', {})
                port = api_config.get('port', 5001)
                host = api_config.get('host', '127.0.0.1')
                
                def run_api():
                    # Initialiser les cl√©s API et le syst√®me
                    from api_rest import init_api_keys_db, app
                    init_api_keys_db()
                    app.run(host=host, port=port, debug=False, use_reloader=False)
                
                thread = threading.Thread(target=run_api, daemon=True)
                thread.start()
                self.threads['api'] = thread
                self.services_actifs['api'] = True
                
                print(f"{Fore.GREEN}üîå API REST d√©marr√©e sur http://{host}:{port}")
                return True
                
            except Exception as e:
                print(f"{Fore.RED}‚ùå Erreur d√©marrage API: {e}")
                return False
        return True
    
    def arreter_services(self):
        """Arr√™ter tous les services"""
        print(f"{Fore.YELLOW}üõë Arr√™t des services...")
        
        # Arr√™ter le monitoring
        if self.systeme_alertes and self.services_actifs['monitoring']:
            self.systeme_alertes.arreter_monitoring()
            self.services_actifs['monitoring'] = False
        
        # Marquer les autres services comme arr√™t√©s
        for service in ['webapp', 'api', 'ml']:
            self.services_actifs[service] = False
        
        self.running = False
        print(f"{Fore.YELLOW}‚úì Services arr√™t√©s")
    
    def afficher_statut(self):
        """Afficher le statut de tous les services"""
        print(f"\n{Fore.CYAN}üìä STATUT DES SERVICES")
        print("=" * 30)
        
        for service, actif in self.services_actifs.items():
            status = f"{Fore.GREEN}‚úÖ Actif" if actif else f"{Fore.RED}‚ùå Inactif"
            print(f"  {service.capitalize():<12} : {status}")
        
        # Informations suppl√©mentaires
        if self.ml_detector:
            ml_status = self.ml_detector.get_model_status()
            print(f"\n{Fore.CYAN}ü§ñ MACHINE LEARNING")
            print(f"  Mod√®les entra√Æn√©s : {'‚úÖ Oui' if ml_status['models_trained'] else '‚ùå Non'}")
            print(f"  Taille donn√©es    : {ml_status['training_data_size']}")
        
        if self.systeme_alertes:
            stats = self.systeme_alertes.obtenir_statistiques()
            print(f"\n{Fore.CYAN}üìà STATISTIQUES ALERTES")
            print(f"  Total             : {stats['globales']['total']}")
            print(f"  Non r√©solues      : {stats['globales']['non_resolues']}")
    
    def mode_cli(self, args):
        """Mode interface en ligne de commande"""
        if not self.initialiser_systeme():
            return False
        
        if args.command == 'list':
            alertes = self.systeme_alertes.lister_alertes(
                limite=args.limite,
                niveau=args.niveau,
                resolu=False if args.non_resolues else None
            )
            
            if alertes:
                from tabulate import tabulate
                table_data = []
                for alerte in alertes:
                    table_data.append([
                        alerte.id[:12] + "...",
                        alerte.timestamp.strftime('%Y-%m-%d %H:%M:%S'),
                        alerte.niveau,
                        alerte.source,
                        alerte.message[:50] + "..." if len(alerte.message) > 50 else alerte.message,
                        "‚úì" if alerte.resolu else "‚ùå"
                    ])
                
                print(f"\n{Fore.CYAN}üìã ALERTES ({len(alertes)} trouv√©es)")
                print(tabulate(table_data, 
                             headers=["ID", "Timestamp", "Niveau", "Source", "Message", "R√©solu"],
                             tablefmt="grid"))
            else:
                print(f"{Fore.YELLOW}‚ö†Ô∏è  Aucune alerte trouv√©e")
        
        elif args.command == 'stats':
            stats = self.systeme_alertes.obtenir_statistiques()
            
            from tabulate import tabulate
            print(f"\n{Fore.CYAN}üìä STATISTIQUES GLOBALES")
            stats_table = [
                ["Total", stats['globales']['total']],
                ["Critiques", stats['globales']['critiques']],
                ["Erreurs", stats['globales']['erreurs']],
                ["Warnings", stats['globales']['warnings']],
                ["Info", stats['globales']['info']],
                ["Non r√©solues", stats['globales']['non_resolues']]
            ]
            print(tabulate(stats_table, headers=["Type", "Nombre"], tablefmt="grid"))
        
        elif args.command == 'resolve':
            if self.systeme_alertes.marquer_resolu(args.id):
                print(f"{Fore.GREEN}‚úì Alerte {args.id} marqu√©e comme r√©solue")
            else:
                print(f"{Fore.RED}‚ùå Alerte {args.id} introuvable")
        
        return True
    
    def mode_daemon(self):
        """Mode service daemon"""
        if not self.initialiser_systeme():
            return False
        
        self.initialiser_ml()
        
        # D√©marrer le monitoring
        if not self.demarrer_monitoring():
            return False
        
        self.running = True
        print(f"{Fore.GREEN}üîÑ Mode daemon actif - Ctrl+C pour arr√™ter")
        
        # Gestion des signaux
        def signal_handler(signum, frame):
            print(f"\n{Fore.YELLOW}‚èπÔ∏è  Signal re√ßu, arr√™t en cours...")
            self.arreter_services()
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        try:
            while self.running:
                time.sleep(1)
        except KeyboardInterrupt:
            pass
        finally:
            self.arreter_services()
        
        return True
    
    def mode_web(self, port=None):
        """Mode interface web uniquement"""
        if not self.initialiser_systeme():
            return False
        
        port = port or self.config.get('services', {}).get('webapp', {}).get('port', 5000)
        
        print(f"{Fore.GREEN}üåê D√©marrage interface web sur port {port}")
        
        try:
            # Initialiser le syst√®me d'alertes pour webapp
            from webapp import init_systeme_alertes, socketio, app
            init_systeme_alertes(db_path=self.db_path, config_path=self.config_path)
            socketio.run(app, host='0.0.0.0', port=port, debug=False, allow_unsafe_werkzeug=True)
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur d√©marrage web: {e}")
            return False
        
        return True
    
    def mode_api(self, port=None):
        """Mode API REST uniquement"""
        if not self.initialiser_systeme():
            return False
        
        port = port or self.config.get('services', {}).get('api', {}).get('port', 5001)
        
        print(f"{Fore.GREEN}üîå D√©marrage API REST sur port {port}")
        
        try:
            # Initialiser les cl√©s API et le syst√®me
            from api_rest import init_api_keys_db, app
            init_api_keys_db()
            app.run(host='0.0.0.0', port=port, debug=False)
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur d√©marrage API: {e}")
            return False
        
        return True
    
    def mode_ml(self, args):
        """Mode Machine Learning"""
        if not self.initialiser_systeme():
            return False
        
        if not self.initialiser_ml():
            return False
        
        if args.ml_command == 'train':
            print(f"{Fore.CYAN}ü§ñ Entra√Ænement des mod√®les ML...")
            try:
                alerts_data = self.ml_detector.load_training_data(days_back=args.days)
                if len(alerts_data) < 100:
                    print(f"{Fore.RED}‚ùå Pas assez de donn√©es (minimum 100, trouv√© {len(alerts_data)})")
                    return False
                
                self.ml_detector.train_models(alerts_data)
                print(f"{Fore.GREEN}‚úÖ Entra√Ænement termin√© avec succ√®s")
                
            except Exception as e:
                print(f"{Fore.RED}‚ùå Erreur lors de l'entra√Ænement: {e}")
                return False
        
        elif args.ml_command == 'status':
            status = self.ml_detector.get_model_status()
            print(f"\n{Fore.CYAN}üìä STATUT DES MOD√àLES ML")
            print("=" * 35)
            print(f"Mod√®les entra√Æn√©s: {'‚úÖ Oui' if status['models_trained'] else '‚ùå Non'}")
            print(f"Taille donn√©es entra√Ænement: {status['training_data_size']}")
            print(f"Dernier entra√Ænement: {status['last_training'] or 'Jamais'}")
        
        elif args.ml_command == 'report':
            print(f"{Fore.CYAN}üìä G√©n√©ration du rapport ML...")
            report = self.ml_detector.generate_analytics_report()
            
            if 'error' not in report:
                print(f"\n{Fore.GREEN}üìà RAPPORT D'ANALYSE ML")
                print("=" * 40)
                print(f"P√©riode: {report['period']}")
                print(f"Alertes analys√©es: {report['total_alerts_analyzed']}")
                print(f"Anomalies d√©tect√©es: {report['anomalies_detected']}")
                print(f"Taux d'anomalies: {report['anomaly_rate']:.1%}")
            else:
                print(f"{Fore.RED}‚ùå {report['error']}")
        
        return True
    
    def mode_all(self):
        """Mode tous services simultan√©ment"""
        if not self.initialiser_systeme():
            return False
        
        self.initialiser_ml()
        
        print(f"{Fore.GREEN}üöÄ D√©marrage de tous les services...")
        
        # D√©marrer tous les services
        services_ok = True
        services_ok &= self.demarrer_monitoring()
        services_ok &= self.demarrer_webapp() 
        services_ok &= self.demarrer_api()
        
        if not services_ok:
            print(f"{Fore.RED}‚ùå Erreur d√©marrage des services")
            return False
        
        self.running = True
        
        # Gestion des signaux pour arr√™t propre
        def signal_handler(signum, frame):
            print(f"\n{Fore.YELLOW}‚èπÔ∏è  Arr√™t de tous les services...")
            self.arreter_services()
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        print(f"{Fore.GREEN}‚úÖ Tous les services d√©marr√©s")
        self.afficher_statut()
        print(f"\n{Fore.CYAN}Ctrl+C pour arr√™ter tous les services")
        
        try:
            while self.running:
                time.sleep(1)
        except KeyboardInterrupt:
            pass
        finally:
            self.arreter_services()
        
        return True

def main():
    """Point d'entr√©e principal unifi√©"""
    parser = argparse.ArgumentParser(
        description="üö® Syst√®me d'Alertes S√©curit√© - Interface Unifi√©e",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
MODES D'UTILISATION:
  cli      Interface en ligne de commande pour gestion des alertes
  daemon   Service de monitoring continu en arri√®re-plan  
  web      Dashboard web interactif avec interface graphique
  api      Serveur API REST pour int√©grations externes
  ml       Machine Learning et analyse d'anomalies
  all      Tous les services simultan√©ment

EXEMPLES:
  %(prog)s cli list --niveau ERROR --non-resolues
  %(prog)s daemon
  %(prog)s web --port 8080
  %(prog)s api --port 8081  
  %(prog)s ml train --days 30
  %(prog)s all
        """
    )
    
    # Arguments globaux
    parser.add_argument("--config", default="config.json", help="Fichier de configuration")
    parser.add_argument("--db", default="alertes.db", help="Base de donn√©es SQLite")
    parser.add_argument("--version", action="version", version="Syst√®me d'Alertes S√©curit√© 3.0.0")
    
    # Sous-commandes principales (modes)
    subparsers = parser.add_subparsers(dest='mode', help='Mode d\'utilisation')
    
    # Mode CLI
    cli_parser = subparsers.add_parser('cli', help='Interface en ligne de commande')
    cli_subparsers = cli_parser.add_subparsers(dest='command')
    
    # CLI: list
    list_cmd = cli_subparsers.add_parser('list', help='Lister les alertes')
    list_cmd.add_argument('--niveau', choices=['INFO', 'WARNING', 'ERROR', 'CRITICAL'])
    list_cmd.add_argument('--non-resolues', action='store_true')
    list_cmd.add_argument('--limite', type=int, default=20)
    
    # CLI: stats  
    cli_subparsers.add_parser('stats', help='Statistiques des alertes')
    
    # CLI: resolve
    resolve_cmd = cli_subparsers.add_parser('resolve', help='Marquer une alerte comme r√©solue')
    resolve_cmd.add_argument('id', help='ID de l\'alerte')
    
    # Mode Daemon
    subparsers.add_parser('daemon', help='Service de monitoring continu')
    
    # Mode Web
    web_parser = subparsers.add_parser('web', help='Interface web')
    web_parser.add_argument('--port', type=int, default=5000, help='Port web')
    web_parser.add_argument('--host', default='0.0.0.0', help='Host web')
    
    # Mode API
    api_parser = subparsers.add_parser('api', help='Serveur API REST')
    api_parser.add_argument('--port', type=int, default=5001, help='Port API')
    api_parser.add_argument('--host', default='0.0.0.0', help='Host API')
    
    # Mode ML
    ml_parser = subparsers.add_parser('ml', help='Machine Learning')
    ml_subparsers = ml_parser.add_subparsers(dest='ml_command')
    
    train_cmd = ml_subparsers.add_parser('train', help='Entra√Æner les mod√®les')
    train_cmd.add_argument('--days', type=int, default=30, help='Jours de donn√©es')
    
    ml_subparsers.add_parser('status', help='Statut des mod√®les ML')
    ml_subparsers.add_parser('report', help='Rapport d\'analyse ML')
    
    # Mode All
    subparsers.add_parser('all', help='Tous les services simultan√©ment')
    
    # Mode Status (pour diagnostic)
    subparsers.add_parser('status', help='Statut de tous les services')
    
    args = parser.parse_args()
    
    # Si aucun mode sp√©cifi√©, afficher l'aide
    if not args.mode:
        parser.print_help()
        return 1
    
    # Initialiser le syst√®me principal
    principal = AlertesPrincipal(config_path=args.config, db_path=args.db)
    
    try:
        # Dispatcher selon le mode
        if args.mode == 'cli':
            return 0 if principal.mode_cli(args) else 1
        
        elif args.mode == 'daemon':
            return 0 if principal.mode_daemon() else 1
        
        elif args.mode == 'web':
            return 0 if principal.mode_web(args.port) else 1
        
        elif args.mode == 'api':
            return 0 if principal.mode_api(args.port) else 1
        
        elif args.mode == 'ml':
            return 0 if principal.mode_ml(args) else 1
        
        elif args.mode == 'all':
            return 0 if principal.mode_all() else 1
        
        elif args.mode == 'status':
            principal.initialiser_systeme()
            principal.initialiser_ml()
            principal.afficher_statut()
            return 0
        
        else:
            print(f"{Fore.RED}‚ùå Mode inconnu: {args.mode}")
            return 1
    
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}‚èπÔ∏è  Interruption utilisateur")
        return 0
    except Exception as e:
        print(f"{Fore.RED}‚ùå Erreur: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())