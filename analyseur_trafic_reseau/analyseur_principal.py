#!/usr/bin/env python3
"""
üåê ANALYSEUR DE TRAFIC R√âSEAU - VERSION UNIFI√âE ET ORCHESTR√âE
=============================================================

Fichier principal qui orchestre tous les composants du syst√®me d'analyse de trafic r√©seau.
Cette version int√®gre toutes les fonctionnalit√©s avanc√©es d√©velopp√©es dans les modules s√©par√©s.

üéØ FONCTIONNALIT√âS INT√âGR√âES:
- ‚úÖ Capture de paquets IPv4/IPv6 avec d√©tection d'anomalies
- ‚úÖ Interface graphique moderne (Tkinter avanc√©e)  
- ‚úÖ Dashboard web temps r√©el avec WebSockets
- ‚úÖ API REST compl√®te avec authentification JWT
- ‚úÖ Machine Learning pour d√©tection d'anomalies avanc√©e
- ‚úÖ Base de donn√©es SQLite pour persistance
- ‚úÖ Syst√®me de notifications multi-canaux (Email/Slack/Webhooks)
- ‚úÖ Filtres BPF avanc√©s personnalisables
- ‚úÖ Export de donn√©es en JSON/CSV
- ‚úÖ Support IPv6 complet avec d√©tections sp√©cialis√©es

üöÄ MODES D'UTILISATION:
- CLI: Analyse en ligne de commande 
- GUI: Interface graphique compl√®te
- WEB: Dashboard web temps r√©el
- API: Serveur API REST pour int√©grations
- ALL: D√©marrer tous les composants simultan√©ment

Auteur: Syst√®me de Cybers√©curit√© Avanc√©
Version: 1.0.0 - Production Ready
"""

import argparse
import sys
import os
import threading
import time
import signal
from datetime import datetime
from typing import Optional, List, Dict
from colorama import init, Fore, Style

# Configuration de colorama pour Windows/Linux
init(autoreset=True)

# Imports des modules du syst√®me
try:
    from analyseur_trafic import AnalyseurTrafic
    from database_manager import DatabaseManager  
    from ml_detector import MLAnomalyDetector
    from notification_system import NotificationSystem
    from advanced_filters import AdvancedPacketFilters
    from integrated_analyzer import IntegratedTrafficAnalyzer
    from gui_analyseur_tkinter import AnalyseurGUI
    print("‚úÖ Modules principaux import√©s avec succ√®s")
except ImportError as e:
    print(f"{Fore.RED}‚ùå Erreur d'importation des modules principaux: {e}")
    print(f"{Fore.YELLOW}üí° V√©rifiez que tous les fichiers sont pr√©sents dans le m√™me dossier")
    sys.exit(1)

# Imports optionnels pour les services web (peuvent √©chouer)
webapp = None
socketio = None
api_app = None
traffic_api = None

try:
    from webapp_analyseur import app as webapp, socketio
    print("‚úÖ WebApp import√© avec succ√®s")
except ImportError as e:
    print(f"{Fore.YELLOW}‚ö†Ô∏è WebApp non disponible: {e}")

try:
    from rest_api import app as api_app, traffic_api
    print("‚úÖ API REST import√© avec succ√®s")
except ImportError as e:
    print(f"{Fore.YELLOW}‚ö†Ô∏è API REST non disponible: {e}")

class AnalyseurTraficPrincipal:
    """Orchestrateur principal pour tous les composants de l'analyseur de trafic"""
    
    def __init__(self):
        self.version = "1.0.0"
        self.components = {
            'analyseur': None,
            'database': None,
            'ml_detector': None,
            'notifications': None,
            'filters': None,
            'integrated_analyzer': None
        }
        self.services = {
            'webapp': None,
            'api_server': None,
            'gui': None
        }
        self.running = False
        self.threads = []
        
        # Configuration du gestionnaire de signaux pour arr√™t propre
        try:
            signal.signal(signal.SIGINT, self._signal_handler)
            signal.signal(signal.SIGTERM, self._signal_handler)
        except Exception as e:
            print(f"{Fore.YELLOW}‚ö†Ô∏è Configuration signaux √©chou√©e: {e}")
        
        self._print_banner()
        
    def _print_banner(self):
        """Afficher la banni√®re du syst√®me"""
        print(f"\n{Fore.BLUE}{'='*80}")
        print(f"{Fore.BLUE}üåê ANALYSEUR DE TRAFIC R√âSEAU - VERSION ORCHESTR√âE v{self.version}")
        print(f"{Fore.BLUE}{'='*80}")
        print(f"{Fore.CYAN}üéØ Syst√®me complet d'analyse et de monitoring de trafic r√©seau")
        print(f"{Fore.CYAN}‚ú® Int√©grant ML, Dashboard Web, API REST, GUI et plus encore")
        print(f"{Fore.BLUE}{'='*80}\n")
    
    def _signal_handler(self, signum, frame):
        """Gestionnaire de signaux pour arr√™t propre"""
        print(f"\n{Fore.YELLOW}üõë Signal d'arr√™t re√ßu ({signum})...")
        self.stop_all_services()
        sys.exit(0)
    
    def initialize_components(self) -> bool:
        """Initialiser tous les composants du syst√®me"""
        try:
            print(f"{Fore.CYAN}‚öôÔ∏è Initialisation des composants principaux...")
            
            # 1. Syst√®me de base de donn√©es
            print(f"{Fore.YELLOW}üóÑÔ∏è Initialisation de la base de donn√©es...")
            self.components['database'] = DatabaseManager("analyseur_principal.db")
            
            # 2. Machine Learning
            print(f"{Fore.YELLOW}ü§ñ Initialisation du d√©tecteur ML...")
            self.components['ml_detector'] = MLAnomalyDetector(threshold=0.1)
            
            # 3. Syst√®me de notifications  
            print(f"{Fore.YELLOW}üìß Initialisation du syst√®me de notifications...")
            self.components['notifications'] = NotificationSystem()
            
            # 4. Syst√®me de filtres avanc√©s
            print(f"{Fore.YELLOW}üîç Initialisation des filtres avanc√©s...")
            self.components['filters'] = AdvancedPacketFilters()
            
            # 5. Analyseur int√©gr√©
            print(f"{Fore.YELLOW}üîß Initialisation de l'analyseur int√©gr√©...")
            self.components['integrated_analyzer'] = IntegratedTrafficAnalyzer()
            if not self.components['integrated_analyzer'].initialize_components():
                print(f"{Fore.YELLOW}‚ö†Ô∏è Certains composants int√©gr√©s non disponibles")
            
            print(f"{Fore.GREEN}‚úÖ Tous les composants initialis√©s avec succ√®s")
            return True
            
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur lors de l'initialisation: {e}")
            return False
    
    def start_cli_mode(self, args) -> bool:
        """D√©marrer le mode CLI (ligne de commande)"""
        try:
            print(f"\n{Fore.CYAN}üñ•Ô∏è D√âMARRAGE DU MODE CLI")
            print("=" * 50)
            
            # Cr√©er l'analyseur de base
            interface = args.interface or "eth0"
            analyseur = AnalyseurTrafic(interface=interface)
            self.components['analyseur'] = analyseur
            
            # Appliquer un filtre personnalis√© si sp√©cifi√©
            if args.filter:
                if args.filter in self.components['filters'].list_available_filters():
                    bpf_filter = self.components['filters'].get_filter_by_name(args.filter)
                    print(f"{Fore.GREEN}‚úì Filtre appliqu√©: {args.filter} -> {bpf_filter}")
                else:
                    print(f"{Fore.YELLOW}üí° Filtre personnalis√©: {args.filter}")
            
            # D√©marrer la capture
            print(f"{Fore.CYAN}üéØ D√©marrage de la capture sur {interface}...")
            success = analyseur.start_capture(
                duration=args.duration or 60,
                packet_count=args.count
            )
            
            if success:
                # Sauvegarder en base de donn√©es
                if self.components['database']:
                    session_id = self.components['database'].save_capture_session(analyseur)
                    print(f"{Fore.GREEN}‚úì Session sauvegard√©e avec ID: {session_id}")
                
                # G√©n√©rer les statistiques
                analyseur.generate_statistics()
                
                # Visualisation si demand√©e
                if not args.no_visual:
                    analyseur.visualize_traffic()
                
                # Export si demand√©
                if args.export:
                    filename = analyseur.export_data(format_type=args.export)
                    print(f"{Fore.GREEN}‚úì Donn√©es export√©es: {filename}")
                
                return True
            else:
                print(f"{Fore.RED}‚ùå √âchec de la capture")
                return False
                
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur en mode CLI: {e}")
            return False
    
    def start_gui_mode(self) -> bool:
        """D√©marrer le mode GUI (interface graphique)"""
        try:
            print(f"\n{Fore.CYAN}üñ•Ô∏è D√âMARRAGE DU MODE GUI")
            print("=" * 50)
            
            import tkinter as tk
            
            def run_gui():
                try:
                    root = tk.Tk()
                    root.title(f"üåê Analyseur de Trafic R√©seau - v{self.version}")
                    root.geometry("1400x900")
                    
                    # Cr√©er l'interface avec nos composants int√©gr√©s
                    gui_app = AnalyseurGUI(root)
                    
                    # Injecter nos composants
                    if self.components['database']:
                        gui_app.db_manager = self.components['database']
                    if self.components['ml_detector']:
                        gui_app.ml_detector = self.components['ml_detector']
                    
                    print(f"{Fore.GREEN}‚úÖ Interface graphique d√©marr√©e")
                    root.mainloop()
                    
                except Exception as e:
                    print(f"{Fore.RED}‚ùå Erreur GUI: {e}")
            
            # D√©marrer dans un thread s√©par√©
            gui_thread = threading.Thread(target=run_gui, daemon=True)
            gui_thread.start()
            self.threads.append(gui_thread)
            self.services['gui'] = gui_thread
            
            return True
            
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur lors du d√©marrage du GUI: {e}")
            return False
    
    def start_web_mode(self, port: int = 5000) -> bool:
        """D√©marrer le mode Web (dashboard)"""
        try:
            if webapp is None or socketio is None:
                print(f"{Fore.RED}‚ùå WebApp non disponible - imports manquants")
                return False
                
            print(f"\n{Fore.CYAN}üåê D√âMARRAGE DU MODE WEB")
            print("=" * 50)
            
            def run_webapp():
                try:
                    print(f"{Fore.GREEN}‚úÖ Dashboard web disponible sur: http://localhost:{port}")
                    print(f"{Fore.CYAN}üéØ Interface de monitoring temps r√©el active")
                    socketio.run(webapp, host='0.0.0.0', port=port, debug=False, allow_unsafe_werkzeug=True)
                except Exception as e:
                    print(f"{Fore.RED}‚ùå Erreur webapp: {e}")
            
            # D√©marrer le serveur web dans un thread
            web_thread = threading.Thread(target=run_webapp, daemon=True)
            web_thread.start()
            self.threads.append(web_thread)
            self.services['webapp'] = web_thread
            
            return True
            
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur lors du d√©marrage du serveur web: {e}")
            return False
    
    def start_api_mode(self, port: int = 5001) -> bool:
        """D√©marrer le mode API REST"""
        try:
            if api_app is None:
                print(f"{Fore.RED}‚ùå API REST non disponible - imports manquants")
                return False
                
            print(f"\n{Fore.CYAN}üîå D√âMARRAGE DU MODE API REST")
            print("=" * 50)
            
            def run_api():
                try:
                    print(f"{Fore.GREEN}‚úÖ API REST disponible sur: http://localhost:{port}")
                    print(f"{Fore.CYAN}üìö Documentation: http://localhost:{port}/api/v1/docs")
                    print(f"{Fore.CYAN}üè• Health check: http://localhost:{port}/api/v1/health")
                    print(f"\n{Fore.YELLOW}üìù Credentials par d√©faut:")
                    print(f"    Username: admin")
                    print(f"    Password: admin123")
                    
                    api_app.run(host='0.0.0.0', port=port, debug=False)
                except Exception as e:
                    print(f"{Fore.RED}‚ùå Erreur API: {e}")
            
            # D√©marrer l'API dans un thread
            api_thread = threading.Thread(target=run_api, daemon=True)
            api_thread.start()
            self.threads.append(api_thread)
            self.services['api_server'] = api_thread
            
            return True
            
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur lors du d√©marrage de l'API: {e}")
            return False
    
    def start_integrated_mode(self) -> bool:
        """D√©marrer le mode int√©gr√© avec tous les composants"""
        try:
            print(f"\n{Fore.CYAN}üîß D√âMARRAGE DU MODE INT√âGR√â")
            print("=" * 60)
            
            # Utiliser l'analyseur int√©gr√©
            if self.components['integrated_analyzer']:
                return self.components['integrated_analyzer'].initialize_components()
            else:
                print(f"{Fore.RED}‚ùå Analyseur int√©gr√© non disponible")
                return False
                
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur en mode int√©gr√©: {e}")
            return False
    
    def show_components_status(self):
        """Afficher le statut des composants individuels"""
        print(f"\n{Fore.CYAN}üîß STATUT DES COMPOSANTS:")
        
        # Statut ML
        if self.components['ml_detector']:
            print(f"\n{Fore.YELLOW}ü§ñ Machine Learning:")
            print(f"   D√©tecteur initialis√©: ‚úÖ")
            print(f"   Seuil configur√©: {self.components['ml_detector'].threshold}")
        
        # Statut des filtres
        if self.components['filters']:
            print(f"\n{Fore.YELLOW}üîç Filtres avanc√©s:")
            filters_count = len(self.components['filters'].list_available_filters())
            print(f"   Filtres disponibles: {filters_count}")
            print(f"   Exemple: {list(self.components['filters'].list_available_filters().keys())[:3]}")
        
        # Statut notifications
        if self.components['notifications']:
            print(f"\n{Fore.YELLOW}üìß Notifications:")
            stats = self.components['notifications'].get_statistics()
            print(f"   Syst√®me op√©rationnel, queue size: {stats.get('queue_size', 0)}")
    
    def start_all_services(self, web_port: int = 5000, api_port: int = 5001) -> bool:
        """D√©marrer tous les services simultan√©ment"""
        try:
            print(f"\n{Fore.CYAN}üöÄ D√âMARRAGE DE TOUS LES SERVICES")
            print("=" * 60)
            
            success_count = 0
            
            # D√©marrer le dashboard web
            if self.start_web_mode(web_port):
                success_count += 1
                time.sleep(1)  # Attendre le d√©marrage
            
            # D√©marrer l'API REST
            if self.start_api_mode(api_port):
                success_count += 1
                time.sleep(1)
            
            # D√©marrer l'interface graphique
            if self.start_gui_mode():
                success_count += 1
                time.sleep(1)
            
            if success_count > 0:
                print(f"\n{Fore.GREEN}‚úÖ {success_count} services d√©marr√©s avec succ√®s")
                print(f"\n{Fore.CYAN}üåê ACC√àS AUX SERVICES:")
                print(f"{Fore.YELLOW}üìä Dashboard Web:  http://localhost:{web_port}")
                print(f"{Fore.YELLOW}üîå API REST:       http://localhost:{api_port}")
                print(f"{Fore.YELLOW}üñ•Ô∏è Interface GUI:  Fen√™tre s√©par√©e")
                print(f"{Fore.YELLOW}üìö Documentation API: http://localhost:{api_port}/api/v1/docs")
                
                self.running = True
                return True
            else:
                print(f"{Fore.RED}‚ùå √âchec du d√©marrage des services")
                return False
                
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur lors du d√©marrage de tous les services: {e}")
            return False
    
    def stop_all_services(self):
        """Arr√™ter proprement tous les services"""
        try:
            print(f"\n{Fore.YELLOW}‚èπÔ∏è Arr√™t des services en cours...")
            self.running = False
            
            # Attendre que les threads se terminent
            for thread in self.threads:
                if thread.is_alive():
                    thread.join(timeout=2)
            
            print(f"{Fore.GREEN}‚úÖ Tous les services arr√™t√©s")
            
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur lors de l'arr√™t: {e}")
    
    def show_system_status(self):
        """Afficher le statut complet du syst√®me"""
        print(f"\n{Fore.CYAN}üìä STATUT DU SYST√àME ANALYSEUR DE TRAFIC")
        print("=" * 60)
        
        # Statut des composants
        print(f"{Fore.YELLOW}üîß Composants:")
        for name, component in self.components.items():
            status = "‚úÖ Actif" if component is not None else "‚ùå Inactif"
            color = Fore.GREEN if component is not None else Fore.RED
            print(f"  {color}{name:20s} : {status}")
        
        # Statut des services
        print(f"\n{Fore.YELLOW}üåê Services:")
        for name, service in self.services.items():
            if service and hasattr(service, 'is_alive'):
                status = "‚úÖ Actif" if service.is_alive() else "‚ùå Inactif"
                color = Fore.GREEN if service.is_alive() else Fore.RED
            else:
                status = "‚ùå Non d√©marr√©"
                color = Fore.RED
            print(f"  {color}{name:20s} : {status}")
        
        # Informations syst√®me
        print(f"\n{Fore.YELLOW}üíª Syst√®me:")
        print(f"  {Fore.CYAN}Version              : {self.version}")
        print(f"  {Fore.CYAN}Threads actifs       : {len(self.threads)}")
        print(f"  {Fore.CYAN}Statut g√©n√©ral       : {'üü¢ Op√©rationnel' if self.running else 'üî¥ Arr√™t√©'}")
        
        # Statistiques des composants
        if self.components['database']:
            try:
                stats = self.components['database'].get_statistics_summary()
                print(f"\n{Fore.YELLOW}üìä Base de donn√©es:")
                print(f"  {Fore.CYAN}Sessions totales     : {stats.get('total_sessions', 0)}")
                print(f"  {Fore.CYAN}Paquets totaux       : {stats.get('total_packets', 0)}")
                print(f"  {Fore.CYAN}Anomalies totales    : {stats.get('total_anomalies', 0)}")
            except:
                print(f"  {Fore.RED}Erreur lors de la r√©cup√©ration des stats DB")

def create_parser():
    """Cr√©er le parser d'arguments en ligne de commande"""
    parser = argparse.ArgumentParser(
        description="üåê Analyseur de Trafic R√©seau - Version Orchestr√©e",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
üéØ MODES D'UTILISATION:

CLI Mode:
  python3 analyseur_principal.py cli --interface eth0 --duration 60
  
GUI Mode:
  python3 analyseur_principal.py gui
  
Web Dashboard:
  python3 analyseur_principal.py web --port 5000
  
API REST:
  python3 analyseur_principal.py api --port 5001
  
Tous les services:
  python3 analyseur_principal.py all --web-port 5000 --api-port 5001

üìä Status du syst√®me:
  python3 analyseur_principal.py status

üîß EXEMPLES D'USAGE AVANC√âS:
  
# Capture avec filtre personnalis√©
python3 analyseur_principal.py cli --filter web_traffic --export json

# Dashboard web sur port personnalis√©
python3 analyseur_principal.py web --port 8080

# D√©marrer tous les services
python3 analyseur_principal.py all --web-port 5000 --api-port 5001
        """
    )
    
    # Mode principal
    parser.add_argument('mode', choices=['cli', 'gui', 'web', 'api', 'all', 'status'],
                       help='Mode de fonctionnement')
    
    # Arguments pour le mode CLI
    parser.add_argument('-i', '--interface', default='eth0',
                       help='Interface r√©seau (d√©faut: eth0)')
    parser.add_argument('-t', '--duration', type=int, default=60,
                       help='Dur√©e de capture en secondes (d√©faut: 60)')
    parser.add_argument('-c', '--count', type=int,
                       help='Nombre maximum de paquets √† capturer')
    parser.add_argument('--filter',
                       help='Nom du filtre pr√©d√©fini ou expression BPF personnalis√©e')
    parser.add_argument('--export', choices=['csv', 'json'],
                       help='Format d\'export des donn√©es')
    parser.add_argument('--no-visual', action='store_true',
                       help='D√©sactiver la g√©n√©ration de graphiques')
    
    # Arguments pour les modes serveur
    parser.add_argument('--port', type=int, default=5000,
                       help='Port pour le serveur web/API (d√©faut: 5000)')
    parser.add_argument('--web-port', type=int, default=5000,
                       help='Port pour le dashboard web (d√©faut: 5000)')
    parser.add_argument('--api-port', type=int, default=5001,
                       help='Port pour l\'API REST (d√©faut: 5001)')
    
    return parser

def main():
    """Fonction principale"""
    parser = create_parser()
    args = parser.parse_args()
    
    # Cr√©er l'orchestrateur principal
    orchestrator = AnalyseurTraficPrincipal()
    
    # Initialiser les composants
    if not orchestrator.initialize_components():
        print(f"{Fore.RED}‚ùå √âchec de l'initialisation des composants")
        sys.exit(1)
    
    # Traitement selon le mode demand√©
    success = True
    
    if args.mode == 'cli':
        success = orchestrator.start_cli_mode(args)
        
    elif args.mode == 'gui':
        success = orchestrator.start_gui_mode()
        if success:
            print(f"{Fore.CYAN}üñ•Ô∏è Interface graphique active. Appuyez sur Ctrl+C pour quitter.")
            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                pass
                
    elif args.mode == 'web':
        success = orchestrator.start_web_mode(args.port)
        if success:
            print(f"{Fore.CYAN}üåê Dashboard web actif. Appuyez sur Ctrl+C pour quitter.")
            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                pass
                
    elif args.mode == 'api':
        success = orchestrator.start_api_mode(args.port)
        if success:
            print(f"{Fore.CYAN}üîå Serveur API actif. Appuyez sur Ctrl+C pour quitter.")
            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                pass
                
    elif args.mode == 'all':
        success = orchestrator.start_all_services(args.web_port, args.api_port)
        if success:
            print(f"\n{Fore.CYAN}üéØ Tous les services sont actifs.")
            print(f"{Fore.YELLOW}   Utilisez les URLs affich√©es ci-dessus pour acc√©der aux services.")
            print(f"{Fore.YELLOW}   Appuyez sur Ctrl+C pour arr√™ter tous les services.")
            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                pass
                
    elif args.mode == 'status':
        orchestrator.show_system_status()
        
    # Nettoyage
    orchestrator.stop_all_services()
    
    # Code de sortie
    exit_code = 0 if success else 1
    if success:
        print(f"\n{Fore.GREEN}üéâ Op√©ration termin√©e avec succ√®s!")
    else:
        print(f"\n{Fore.RED}‚ùå Op√©ration √©chou√©e")
    
    sys.exit(exit_code)

if __name__ == "__main__":
    main()