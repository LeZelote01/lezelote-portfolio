#!/usr/bin/env python3
"""
Syst√®me de Notifications - Analyseur de Trafic R√©seau
Support Email, Slack, Webhooks et templates personnalisables

Fonctionnalit√©s:
- Notifications Email (SMTP)
- Notifications Slack (Webhooks)
- Notifications g√©n√©riques (Webhooks)
- Templates de messages personnalisables
- Seuils d'alerte configurables
- Rate limiting et cooldown
- Historique des notifications
"""

import smtplib
import json
import requests
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from colorama import Fore, Style
import logging
import os
from pathlib import Path
import threading
from queue import Queue
import jinja2

# Import conditionnel pour email
try:
    from email.mime.text import MimeText
    from email.mime.multipart import MimeMultipart
    from email.mime.base import MimeBase
    from email import encoders
    EMAIL_AVAILABLE = True
except ImportError:
    EMAIL_AVAILABLE = False
    print(f"{Fore.YELLOW}‚ö† Module email non disponible - notifications email d√©sactiv√©es")

class NotificationSystem:
    """Syst√®me de notifications avanc√© pour l'analyseur de trafic"""
    
    def __init__(self, config_file: str = "notification_config.json"):
        self.config_file = config_file
        self.config = self._load_config()
        self.notification_queue = Queue()
        self.notification_history = []
        self.rate_limits = {}
        self.logger = self._setup_logger()
        self.templates = self._load_templates()
        
        # D√©marrer le worker de notifications en arri√®re-plan
        self.worker_thread = threading.Thread(target=self._notification_worker, daemon=True)
        self.worker_thread.start()
        
        print(f"{Fore.GREEN}‚úì Syst√®me de Notifications initialis√©")
    
    def _setup_logger(self):
        """Configuration du logger pour les notifications"""
        logger = logging.getLogger('NotificationSystem')
        logger.setLevel(logging.INFO)
        handler = logging.StreamHandler()
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        logger.addHandler(handler)
        return logger
    
    def _load_config(self) -> Dict:
        """Charger la configuration des notifications"""
        default_config = {
            "email": {
                "enabled": False,
                "smtp_server": "smtp.gmail.com",
                "smtp_port": 587,
                "username": "",
                "password": "",
                "from_address": "",
                "to_addresses": [],
                "use_tls": True
            },
            "slack": {
                "enabled": False,
                "webhook_url": "",
                "channel": "#alerts",
                "username": "TrafficAnalyzer",
                "icon_emoji": ":warning:"
            },
            "webhooks": {
                "enabled": False,
                "endpoints": []
            },
            "rate_limiting": {
                "enabled": True,
                "max_notifications_per_hour": 60,
                "cooldown_seconds": 300
            },
            "alert_thresholds": {
                "anomaly_count": 5,
                "packet_rate": 1000,
                "suspicious_ips": 10,
                "port_scan_threshold": 20
            }
        }
        
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r') as f:
                    loaded_config = json.load(f)
                    # Merger avec la config par d√©faut
                    default_config.update(loaded_config)
                    return default_config
            else:
                # Cr√©er le fichier de config par d√©faut
                self._save_config(default_config)
                return default_config
        except Exception as e:
            self.logger.error(f"Erreur lors du chargement de la config: {e}")
            return default_config
    
    def _save_config(self, config: Dict):
        """Sauvegarder la configuration"""
        try:
            with open(self.config_file, 'w') as f:
                json.dump(config, f, indent=2)
        except Exception as e:
            self.logger.error(f"Erreur lors de la sauvegarde: {e}")
    
    def _load_templates(self) -> Dict:
        """Charger les templates de messages"""
        return {
            "anomaly_detected": {
                "subject": "üö® Anomalie d√©tect√©e - Analyseur de Trafic",
                "email_template": """
                <h2>üö® Anomalie de Trafic R√©seau D√©tect√©e</h2>
                
                <p><strong>Type d'anomalie:</strong> {{ anomaly_type }}</p>
                <p><strong>Heure de d√©tection:</strong> {{ timestamp }}</p>
                <p><strong>IP Source:</strong> {{ source_ip }}</p>
                <p><strong>D√©tails:</strong> {{ details }}</p>
                
                <h3>üìä Statistiques du moment:</h3>
                <ul>
                    <li>Total paquets: {{ total_packets }}</li>
                    <li>Paquets/seconde: {{ packets_per_second }}</li>
                    <li>Anomalies d√©tect√©es: {{ anomaly_count }}</li>
                </ul>
                
                <p><em>Message automatique de l'Analyseur de Trafic R√©seau</em></p>
                """,
                "slack_template": {
                    "text": "üö® Anomalie de trafic r√©seau d√©tect√©e",
                    "attachments": [
                        {
                            "color": "danger",
                            "fields": [
                                {"title": "Type", "value": "{{ anomaly_type }}", "short": True},
                                {"title": "IP Source", "value": "{{ source_ip }}", "short": True},
                                {"title": "Heure", "value": "{{ timestamp }}", "short": True},
                                {"title": "D√©tails", "value": "{{ details }}", "short": False}
                            ]
                        }
                    ]
                }
            },
            "high_traffic": {
                "subject": "‚ö° Trafic √©lev√© d√©tect√© - Analyseur de Trafic",
                "email_template": """
                <h2>‚ö° Trafic R√©seau √âlev√©</h2>
                
                <p><strong>Seuil d√©pass√©:</strong> {{ threshold }} paquets/seconde</p>
                <p><strong>Trafic actuel:</strong> {{ current_rate }} paquets/seconde</p>
                <p><strong>Heure de d√©tection:</strong> {{ timestamp }}</p>
                
                <h3>üìà Statistiques d√©taill√©es:</h3>
                <ul>
                    <li>Top protocoles: {{ top_protocols }}</li>
                    <li>Top IPs: {{ top_ips }}</li>
                    <li>Dur√©e de l'√©v√©nement: {{ event_duration }}</li>
                </ul>
                """,
                "slack_template": {
                    "text": "‚ö° Trafic r√©seau √©lev√© d√©tect√©",
                    "attachments": [
                        {
                            "color": "warning",
                            "fields": [
                                {"title": "Seuil", "value": "{{ threshold }} pps", "short": True},
                                {"title": "Actuel", "value": "{{ current_rate }} pps", "short": True},
                                {"title": "Heure", "value": "{{ timestamp }}", "short": False}
                            ]
                        }
                    ]
                }
            },
            "system_status": {
                "subject": "üìä Rapport de statut - Analyseur de Trafic",
                "email_template": """
                <h2>üìä Rapport de Statut Syst√®me</h2>
                
                <p><strong>P√©riode:</strong> {{ period }}</p>
                <p><strong>Status:</strong> {{ system_status }}</p>
                
                <h3>üìà Statistiques de la p√©riode:</h3>
                <ul>
                    <li>Total paquets analys√©s: {{ total_packets }}</li>
                    <li>Anomalies d√©tect√©es: {{ anomalies_count }}</li>
                    <li>Taux de d√©tection: {{ detection_rate }}%</li>
                    <li>Performance moyenne: {{ avg_performance }} pps</li>
                </ul>
                
                <h3>üéØ Top √©v√©nements:</h3>
                {{ top_events }}
                """,
                "slack_template": {
                    "text": "üìä Rapport de statut syst√®me",
                    "attachments": [
                        {
                            "color": "good",
                            "fields": [
                                {"title": "P√©riode", "value": "{{ period }}", "short": True},
                                {"title": "Status", "value": "{{ system_status }}", "short": True},
                                {"title": "Paquets", "value": "{{ total_packets }}", "short": True},
                                {"title": "Anomalies", "value": "{{ anomalies_count }}", "short": True}
                            ]
                        }
                    ]
                }
            }
        }
    
    def _check_rate_limit(self, notification_type: str) -> bool:
        """V√©rifier les limites de taux pour √©viter le spam"""
        if not self.config["rate_limiting"]["enabled"]:
            return True
        
        current_time = datetime.now()
        max_per_hour = self.config["rate_limiting"]["max_notifications_per_hour"]
        cooldown = self.config["rate_limiting"]["cooldown_seconds"]
        
        # V√©rifier le cooldown global
        if notification_type in self.rate_limits:
            last_sent = self.rate_limits[notification_type]["last_sent"]
            if (current_time - last_sent).total_seconds() < cooldown:
                return False
        
        # V√©rifier le nombre d'envois par heure
        hour_ago = current_time - timedelta(hours=1)
        recent_notifications = [
            n for n in self.notification_history
            if n["timestamp"] > hour_ago and n["type"] == notification_type
        ]
        
        if len(recent_notifications) >= max_per_hour:
            return False
        
        return True
    
    def _update_rate_limit(self, notification_type: str):
        """Mettre √† jour les informations de rate limiting"""
        current_time = datetime.now()
        self.rate_limits[notification_type] = {
            "last_sent": current_time,
            "count": self.rate_limits.get(notification_type, {}).get("count", 0) + 1
        }
    
    def _render_template(self, template_name: str, template_type: str, data: Dict) -> str:
        """Rendre un template avec les donn√©es fournies"""
        try:
            if template_name not in self.templates:
                return f"Template '{template_name}' non trouv√©"
            
            template_content = self.templates[template_name].get(template_type, "")
            if not template_content:
                return f"Type de template '{template_type}' non trouv√©"
            
            # Utiliser Jinja2 pour le rendu si c'est une string
            if isinstance(template_content, str):
                template = jinja2.Template(template_content)
                return template.render(**data)
            
            # Pour les templates complexes (Slack), traiter r√©cursivement
            if isinstance(template_content, dict):
                rendered = {}
                for key, value in template_content.items():
                    if isinstance(value, str):
                        template = jinja2.Template(value)
                        rendered[key] = template.render(**data)
                    elif isinstance(value, list):
                        rendered[key] = []
                        for item in value:
                            if isinstance(item, dict):
                                rendered_item = {}
                                for k, v in item.items():
                                    if isinstance(v, str):
                                        template = jinja2.Template(v)
                                        rendered_item[k] = template.render(**data)
                                    elif isinstance(v, list):
                                        rendered_item[k] = []
                                        for sub_item in v:
                                            if isinstance(sub_item, dict):
                                                rendered_sub_item = {}
                                                for sk, sv in sub_item.items():
                                                    if isinstance(sv, str):
                                                        template = jinja2.Template(sv)
                                                        rendered_sub_item[sk] = template.render(**data)
                                                    else:
                                                        rendered_sub_item[sk] = sv
                                                rendered_item[k].append(rendered_sub_item)
                                            else:
                                                rendered_item[k].append(sub_item)
                                    else:
                                        rendered_item[k] = v
                                rendered[key].append(rendered_item)
                            else:
                                rendered[key].append(item)
                    else:
                        rendered[key] = value
                return rendered
            
            return str(template_content)
            
        except Exception as e:
            self.logger.error(f"Erreur lors du rendu du template: {e}")
            return f"Erreur de template: {e}"
    
    def send_email_notification(self, subject: str, body: str, to_addresses: List[str] = None) -> bool:
        """Envoyer une notification par email"""
        try:
            if not EMAIL_AVAILABLE:
                self.logger.warning("Module email non disponible")
                return False
                
            if not self.config["email"]["enabled"]:
                return False
            
            config = self.config["email"]
            to_addresses = to_addresses or config["to_addresses"]
            
            if not to_addresses:
                self.logger.warning("Aucune adresse email de destination configur√©e")
                return False
            
            # Cr√©er le message
            msg = MimeMultipart('alternative')
            msg['From'] = config["from_address"]
            msg['To'] = ", ".join(to_addresses)
            msg['Subject'] = subject
            
            # Ajouter le corps du message (HTML)
            html_part = MimeText(body, 'html')
            msg.attach(html_part)
            
            # Envoyer
            server = smtplib.SMTP(config["smtp_server"], config["smtp_port"])
            if config["use_tls"]:
                server.starttls()
            
            server.login(config["username"], config["password"])
            server.send_message(msg)
            server.quit()
            
            self.logger.info(f"Email envoy√© √† {len(to_addresses)} destinataires")
            return True
            
        except Exception as e:
            self.logger.error(f"Erreur lors de l'envoi d'email: {e}")
            return False
    
    def send_slack_notification(self, message: Dict) -> bool:
        """Envoyer une notification Slack"""
        try:
            if not self.config["slack"]["enabled"]:
                return False
            
            webhook_url = self.config["slack"]["webhook_url"]
            if not webhook_url:
                self.logger.warning("URL webhook Slack non configur√©e")
                return False
            
            # Ajouter les param√®tres par d√©faut
            payload = {
                "channel": self.config["slack"]["channel"],
                "username": self.config["slack"]["username"],
                "icon_emoji": self.config["slack"]["icon_emoji"]
            }
            
            # Merger avec le message fourni
            payload.update(message)
            
            response = requests.post(webhook_url, json=payload, timeout=10)
            response.raise_for_status()
            
            self.logger.info("Notification Slack envoy√©e avec succ√®s")
            return True
            
        except Exception as e:
            self.logger.error(f"Erreur lors de l'envoi Slack: {e}")
            return False
    
    def send_webhook_notification(self, endpoint: str, payload: Dict) -> bool:
        """Envoyer une notification via webhook g√©n√©rique"""
        try:
            headers = {'Content-Type': 'application/json'}
            response = requests.post(endpoint, json=payload, headers=headers, timeout=10)
            response.raise_for_status()
            
            self.logger.info(f"Webhook envoy√© √† {endpoint}")
            return True
            
        except Exception as e:
            self.logger.error(f"Erreur lors de l'envoi webhook: {e}")
            return False
    
    def _notification_worker(self):
        """Worker en arri√®re-plan pour traiter les notifications"""
        while True:
            try:
                notification = self.notification_queue.get(timeout=1)
                self._process_notification(notification)
                self.notification_queue.task_done()
            except:
                time.sleep(1)
    
    def _process_notification(self, notification: Dict):
        """Traiter une notification individuelle"""
        try:
            notification_type = notification["type"]
            template_name = notification["template"]
            data = notification["data"]
            
            # V√©rifier les limites de taux
            if not self._check_rate_limit(notification_type):
                self.logger.info(f"Notification {notification_type} bloqu√©e par rate limiting")
                return
            
            success_count = 0
            
            # Email
            if self.config["email"]["enabled"]:
                subject = self._render_template(template_name, "subject", data)
                body = self._render_template(template_name, "email_template", data)
                if self.send_email_notification(subject, body):
                    success_count += 1
            
            # Slack
            if self.config["slack"]["enabled"]:
                slack_message = self._render_template(template_name, "slack_template", data)
                if isinstance(slack_message, dict):
                    if self.send_slack_notification(slack_message):
                        success_count += 1
            
            # Webhooks
            if self.config["webhooks"]["enabled"]:
                for endpoint in self.config["webhooks"]["endpoints"]:
                    webhook_payload = {
                        "type": notification_type,
                        "template": template_name,
                        "data": data,
                        "timestamp": datetime.now().isoformat()
                    }
                    if self.send_webhook_notification(endpoint, webhook_payload):
                        success_count += 1
            
            # Enregistrer dans l'historique
            self.notification_history.append({
                "type": notification_type,
                "template": template_name,
                "timestamp": datetime.now(),
                "success": success_count > 0,
                "channels_sent": success_count
            })
            
            # Mettre √† jour les limites de taux
            if success_count > 0:
                self._update_rate_limit(notification_type)
                self.logger.info(f"Notification {notification_type} envoy√©e via {success_count} canaux")
            
        except Exception as e:
            self.logger.error(f"Erreur lors du traitement de la notification: {e}")
    
    def queue_notification(self, notification_type: str, template_name: str, data: Dict):
        """Ajouter une notification √† la queue"""
        notification = {
            "type": notification_type,
            "template": template_name,
            "data": data,
            "queued_at": datetime.now()
        }
        self.notification_queue.put(notification)
    
    def send_anomaly_alert(self, anomaly_data: Dict):
        """Envoyer une alerte d'anomalie"""
        self.queue_notification("anomaly_detected", "anomaly_detected", anomaly_data)
    
    def send_high_traffic_alert(self, traffic_data: Dict):
        """Envoyer une alerte de trafic √©lev√©"""
        self.queue_notification("high_traffic", "high_traffic", traffic_data)
    
    def send_status_report(self, status_data: Dict):
        """Envoyer un rapport de statut"""
        self.queue_notification("system_status", "system_status", status_data)
    
    def configure_email(self, smtp_server: str, smtp_port: int, username: str, 
                       password: str, from_address: str, to_addresses: List[str]):
        """Configurer les param√®tres email"""
        self.config["email"].update({
            "enabled": True,
            "smtp_server": smtp_server,
            "smtp_port": smtp_port,
            "username": username,
            "password": password,
            "from_address": from_address,
            "to_addresses": to_addresses
        })
        self._save_config(self.config)
        print(f"{Fore.GREEN}‚úì Configuration email mise √† jour")
    
    def configure_slack(self, webhook_url: str, channel: str = "#alerts"):
        """Configurer les param√®tres Slack"""
        self.config["slack"].update({
            "enabled": True,
            "webhook_url": webhook_url,
            "channel": channel
        })
        self._save_config(self.config)
        print(f"{Fore.GREEN}‚úì Configuration Slack mise √† jour")
    
    def get_notification_history(self, limit: int = 50) -> List[Dict]:
        """R√©cup√©rer l'historique des notifications"""
        return self.notification_history[-limit:]
    
    def get_statistics(self) -> Dict:
        """Obtenir les statistiques des notifications"""
        total_notifications = len(self.notification_history)
        successful_notifications = len([n for n in self.notification_history if n["success"]])
        
        return {
            "total_notifications": total_notifications,
            "successful_notifications": successful_notifications,
            "success_rate": successful_notifications / total_notifications * 100 if total_notifications > 0 else 0,
            "rate_limits": self.rate_limits,
            "queue_size": self.notification_queue.qsize()
        }

def main():
    """Fonction de d√©monstration du syst√®me de notifications"""
    print(f"{Fore.BLUE}üìß SYST√àME DE NOTIFICATIONS - D√âMONSTRATION")
    print("=" * 60)
    
    # Initialiser le syst√®me
    notification_system = NotificationSystem()
    
    # Configuration de d√©monstration
    print(f"\n{Fore.CYAN}‚öôÔ∏è Configuration de d√©monstration:")
    
    # Simuler une configuration email (ne pas utiliser de vraies credentials)
    print(f"{Fore.YELLOW}üìß Configuration email (simulation)...")
    
    # Simuler une configuration Slack
    print(f"{Fore.YELLOW}üí¨ Configuration Slack (simulation)...")
    
    # Tester les templates
    print(f"\n{Fore.CYAN}üé® Test des templates:")
    
    # Donn√©es de test pour anomalie
    anomaly_data = {
        "anomaly_type": "Port Scan Detected",
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "source_ip": "192.168.1.100",
        "details": "Scan de 25 ports diff√©rents d√©tect√©",
        "total_packets": 15420,
        "packets_per_second": 342.5,
        "anomaly_count": 3
    }
    
    # Tester le rendu des templates
    email_subject = notification_system._render_template("anomaly_detected", "subject", anomaly_data)
    email_body = notification_system._render_template("anomaly_detected", "email_template", anomaly_data)
    
    print(f"{Fore.GREEN}‚úì Subject: {email_subject}")
    print(f"{Fore.GREEN}‚úì Email template rendu avec succ√®s ({len(email_body)} caract√®res)")
    
    # Test de notification en queue
    print(f"\n{Fore.CYAN}üì§ Test de notification en queue:")
    notification_system.send_anomaly_alert(anomaly_data)
    
    # Attendre un peu pour le traitement
    time.sleep(2)
    
    # Afficher les statistiques
    print(f"\n{Fore.CYAN}üìä Statistiques:")
    stats = notification_system.get_statistics()
    for key, value in stats.items():
        print(f"{Fore.YELLOW}{key}: {value}")
    
    # Afficher l'historique
    print(f"\n{Fore.CYAN}üìú Historique r√©cent:")
    history = notification_system.get_notification_history(5)
    for i, notification in enumerate(history, 1):
        timestamp = notification["timestamp"].strftime("%H:%M:%S")
        print(f"{Fore.YELLOW}{i}. {timestamp} - {notification['type']} - {'‚úì' if notification['success'] else '‚úó'}")
    
    print(f"\n{Fore.GREEN}‚úÖ D√©monstration termin√©e avec succ√®s!")

if __name__ == "__main__":
    main()