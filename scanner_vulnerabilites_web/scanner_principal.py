#!/usr/bin/env python3
"""
üï∑Ô∏è SCANNER DE VULN√âRABILIT√âS WEB - FICHIER PRINCIPAL UNIFI√â
============================================================

Orchestrateur centralis√© pour toutes les fonctionnalit√©s du scanner de vuln√©rabilit√©s web.
Cette version int√®gre toutes les fonctionnalit√©s dans une architecture modulaire unifi√©e.

üéØ FONCTIONNALIT√âS INT√âGR√âES:
- ‚úÖ Scanner de vuln√©rabilit√©s web (XSS, SQL Injection, SSL/TLS)
- ‚úÖ D√©tection de technologies et frameworks
- ‚úÖ Analyse des en-t√™tes de s√©curit√©
- ‚úÖ G√©n√©ration de rapports HTML d√©taill√©s
- ‚úÖ Base de donn√©es SQLite pour historique
- ‚úÖ Mode batch pour scans multiples
- ‚úÖ Interface CLI compl√®te avec statistiques

üöÄ MODES D'UTILISATION:
- CLI: Scan en ligne de commande
- SINGLE: Scan d'une URL unique
- MULTIPLE: Scan de plusieurs URLs depuis un fichier
- STATS: Statistiques des scans pr√©c√©dents
- REPORT: G√©n√©ration de rapports d√©taill√©s

Auteur: Syst√®me de Cybers√©curit√© Avanc√©
Version: 1.0.0 - Production Ready
"""

import argparse
import sys
import os
import threading
import time
import signal
from datetime import datetime
from typing import Optional, List, Dict
from pathlib import Path
from colorama import init, Fore, Style

# Configuration de colorama pour Windows/Linux
init(autoreset=True)

# Import du module principal
try:
    from scanner_vulnerabilites import WebVulnScanner, ResultatScan
    print("‚úÖ Module scanner principal import√© avec succ√®s")
except ImportError as e:
    print(f"{Fore.RED}‚ùå Erreur d'importation du module principal: {e}")
    print(f"{Fore.YELLOW}üí° V√©rifiez que scanner_vulnerabilites.py est pr√©sent dans le m√™me dossier")
    sys.exit(1)

class ScannerVulnerabilitesWeb:
    """Orchestrateur principal pour le scanner de vuln√©rabilit√©s web"""
    
    def __init__(self):
        self.version = "1.0.0"
        self.scanner = None
        self.running = False
        
        # Configuration du gestionnaire de signaux pour arr√™t propre
        try:
            signal.signal(signal.SIGINT, self._signal_handler)
            signal.signal(signal.SIGTERM, self._signal_handler)
        except Exception as e:
            print(f"{Fore.YELLOW}‚ö†Ô∏è Configuration signaux √©chou√©e: {e}")
        
        self._print_banner()
        
    def _print_banner(self):
        """Afficher la banni√®re du syst√®me"""
        print(f"\n{Fore.BLUE}{'='*80}")
        print(f"{Fore.BLUE}üï∑Ô∏è SCANNER DE VULN√âRABILIT√âS WEB - VERSION ORCHESTR√âE v{self.version}")
        print(f"{Fore.BLUE}{'='*80}")
        print(f"{Fore.CYAN}üéØ Scanner automatis√© pour vuln√©rabilit√©s de s√©curit√© web")
        print(f"{Fore.CYAN}‚ú® XSS, SQL Injection, SSL/TLS, En-t√™tes de s√©curit√© et plus")
        print(f"{Fore.BLUE}{'='*80}\n")
    
    def _signal_handler(self, signum, frame):
        """Gestionnaire de signaux pour arr√™t propre"""
        print(f"\n{Fore.YELLOW}üõë Signal d'arr√™t re√ßu ({signum})...")
        self.running = False
        sys.exit(0)
    
    def initialize_scanner(self) -> bool:
        """Initialiser le scanner"""
        try:
            print(f"{Fore.CYAN}‚öôÔ∏è Initialisation du scanner...")
            
            self.scanner = WebVulnScanner()
            print(f"{Fore.GREEN}‚úÖ Scanner initialis√© avec succ√®s")
            return True
            
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur lors de l'initialisation: {e}")
            return False
    
    def scan_single_url(self, args) -> bool:
        """Scanner une URL unique"""
        try:
            print(f"\n{Fore.CYAN}üîç SCAN D'URL UNIQUE")
            print("=" * 50)
            
            url = args.url
            print(f"{Fore.CYAN}üéØ Scan de: {url}")
            
            # Effectuer le scan
            resultat = self.scanner.scanner_url(url)
            
            if resultat:
                print(f"{Fore.GREEN}‚úì Scan termin√© avec succ√®s")
                print(f"{Fore.CYAN}üìä Vulnerabilit√©s d√©tect√©es: {len(resultat.vulnerabilites)}")
                print(f"{Fore.CYAN}‚è±Ô∏è Dur√©e: {resultat.duree_scan:.2f}s")
                print(f"{Fore.CYAN}üèÜ Score s√©curit√©: {resultat.score_securite}/100")
                
                # G√©n√©rer le rapport HTML si demand√©
                if not args.no_report:
                    rapport_path = self.scanner.generer_rapport_html(resultat)
                    print(f"{Fore.GREEN}‚úì Rapport g√©n√©r√©: {rapport_path}")
                
                # Afficher le r√©sum√© des vuln√©rabilit√©s
                if resultat.vulnerabilites:
                    print(f"\n{Fore.YELLOW}üö® Vuln√©rabilit√©s d√©tect√©es:")
                    for vuln in resultat.vulnerabilites:
                        severity_color = {
                            'LOW': Fore.YELLOW,
                            'MEDIUM': Fore.YELLOW,
                            'HIGH': Fore.RED,
                            'CRITICAL': Fore.RED
                        }.get(vuln.severite, Fore.WHITE)
                        print(f"  {severity_color}‚Ä¢ [{vuln.severite}] {vuln.type_vuln}: {vuln.description}")
                else:
                    print(f"\n{Fore.GREEN}üõ°Ô∏è Aucune vuln√©rabilit√© d√©tect√©e")
                
                return True
            else:
                print(f"{Fore.RED}‚ùå √âchec du scan")
                return False
                
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur lors du scan: {e}")
            return False
    
    def scan_multiple_urls(self, args) -> bool:
        """Scanner plusieurs URLs depuis un fichier"""
        try:
            print(f"\n{Fore.CYAN}üîç SCAN MULTIPLE D'URLS")
            print("=" * 50)
            
            file_path = args.file
            if not os.path.exists(file_path):
                print(f"{Fore.RED}‚ùå Fichier non trouv√©: {file_path}")
                return False
            
            # Lire les URLs depuis le fichier
            with open(file_path, 'r') as f:
                urls = [line.strip() for line in f if line.strip() and not line.startswith('#')]
            
            if not urls:
                print(f"{Fore.RED}‚ùå Aucune URL trouv√©e dans le fichier")
                return False
            
            print(f"{Fore.CYAN}üìÅ {len(urls)} URL(s) trouv√©e(s) dans le fichier")
            
            # Scanner chaque URL
            resultats = []
            for i, url in enumerate(urls, 1):
                print(f"\n{Fore.CYAN}üéØ [{i}/{len(urls)}] Scan de: {url}")
                
                try:
                    resultat = self.scanner.scanner_url(url)
                    if resultat:
                        resultats.append(resultat)
                        print(f"  {Fore.GREEN}‚úì Scan r√©ussi - {len(resultat.vulnerabilites)} vuln√©rabilit√©(s)")
                        
                        # G√©n√©rer le rapport pour cette URL
                        if not args.no_report:
                            self.scanner.generer_rapport_html(resultat)
                    else:
                        print(f"  {Fore.RED}‚úó Scan √©chou√©")
                except Exception as e:
                    print(f"  {Fore.RED}‚úó Erreur: {e}")
            
            # R√©sum√© final
            print(f"\n{Fore.CYAN}üìä R√âSUM√â DU SCAN MULTIPLE:")
            print(f"  URLs scann√©es avec succ√®s: {len(resultats)}/{len(urls)}")
            
            total_vuln = sum(len(r.vulnerabilites) for r in resultats)
            print(f"  Total vuln√©rabilit√©s d√©tect√©es: {total_vuln}")
            
            if resultats:
                score_moyen = sum(r.score_securite for r in resultats) / len(resultats)
                print(f"  Score de s√©curit√© moyen: {score_moyen:.1f}/100")
            
            return len(resultats) > 0
            
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur lors du scan multiple: {e}")
            return False
    
    def show_statistics(self) -> bool:
        """Afficher les statistiques des scans pr√©c√©dents"""
        try:
            print(f"\n{Fore.CYAN}üìä STATISTIQUES DES SCANS")
            print("=" * 50)
            
            stats = self.scanner.obtenir_statistiques()
            
            if not stats:
                print(f"{Fore.YELLOW}‚ö†Ô∏è Aucune donn√©e statistique disponible")
                return False
            
            print(f"{Fore.CYAN}üìà Statistiques g√©n√©rales:")
            print(f"  Total scans effectu√©s: {stats.get('total_scans', 0)}")
            print(f"  Total vuln√©rabilit√©s: {stats.get('total_vulnerabilites', 0)}")
            print(f"  Score s√©curit√© moyen: {stats.get('score_moyen', 0):.1f}/100")
            
            # R√©partition par type de vuln√©rabilit√©
            if 'types_vulnerabilites' in stats:
                print(f"\n{Fore.CYAN}üîç R√©partition par type:")
                for type_vuln, count in stats['types_vulnerabilites'].items():
                    print(f"  {type_vuln}: {count}")
            
            # R√©partition par s√©v√©rit√©
            if 'severites' in stats:
                print(f"\n{Fore.CYAN}‚ö†Ô∏è R√©partition par s√©v√©rit√©:")
                for severite, count in stats['severites'].items():
                    color = {
                        'LOW': Fore.YELLOW,
                        'MEDIUM': Fore.YELLOW,
                        'HIGH': Fore.RED,
                        'CRITICAL': Fore.RED
                    }.get(severite, Fore.WHITE)
                    print(f"  {color}{severite}: {count}")
            
            return True
            
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur lors de l'affichage des statistiques: {e}")
            return False
    
    def show_system_status(self):
        """Afficher le statut complet du syst√®me"""
        print(f"\n{Fore.CYAN}üìä STATUT DU SCANNER DE VULN√âRABILIT√âS WEB")
        print("=" * 60)
        
        # Statut du scanner
        print(f"{Fore.YELLOW}üîß Scanner:")
        scanner_status = "‚úÖ Actif" if self.scanner is not None else "‚ùå Inactif"
        color = Fore.GREEN if self.scanner is not None else Fore.RED
        print(f"  {color}Scanner principal     : {scanner_status}")
        
        # Informations syst√®me
        print(f"\n{Fore.YELLOW}üíª Syst√®me:")
        print(f"  {Fore.CYAN}Version              : {self.version}")
        print(f"  {Fore.CYAN}Base de donn√©es      : {'‚úÖ Disponible' if os.path.exists('scans_vulnerabilites.db') else '‚ö†Ô∏è Non initialis√©e'}")
        
        # V√©rifier les d√©pendances
        print(f"\n{Fore.YELLOW}üì¶ D√©pendances:")
        dependencies = ['requests', 'beautifulsoup4', 'colorama', 'tabulate']
        for dep in dependencies:
            try:
                __import__(dep.replace('-', '_'))
                print(f"  {Fore.GREEN}‚úÖ {dep}")
            except ImportError:
                print(f"  {Fore.RED}‚ùå {dep}")
        
        # Statistiques si disponibles
        if self.scanner:
            try:
                stats = self.scanner.obtenir_statistiques()
                if stats:
                    print(f"\n{Fore.YELLOW}üìä Statistiques:")
                    print(f"  {Fore.CYAN}Scans effectu√©s      : {stats.get('total_scans', 0)}")
                    print(f"  {Fore.CYAN}Vuln√©rabilit√©s       : {stats.get('total_vulnerabilites', 0)}")
                    print(f"  {Fore.CYAN}Score moyen          : {stats.get('score_moyen', 0):.1f}/100")
            except:
                print(f"  {Fore.RED}Erreur lors de la r√©cup√©ration des stats")

def create_parser():
    """Cr√©er le parser d'arguments en ligne de commande"""
    parser = argparse.ArgumentParser(
        description="üï∑Ô∏è Scanner de Vuln√©rabilit√©s Web - Version Orchestr√©e",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
üéØ MODES D'UTILISATION:

Scan d'une URL unique:
  python3 scanner_principal.py single https://example.com
  
Scan multiple depuis un fichier:
  python3 scanner_principal.py multiple --file urls.txt
  
Statistiques des scans:
  python3 scanner_principal.py stats
  
Status du syst√®me:
  python3 scanner_principal.py status

üîß EXEMPLES D'USAGE AVANC√âS:
  
# Scan sans g√©n√©ration de rapport
python3 scanner_principal.py single https://example.com --no-report

# Scan multiple avec workers parall√®les
python3 scanner_principal.py multiple --file urls.txt --workers 5

# Afficher les statistiques
python3 scanner_principal.py stats
        """
    )
    
    # Mode principal
    parser.add_argument('mode', choices=['single', 'multiple', 'stats', 'status'],
                       help='Mode de fonctionnement')
    
    # Arguments pour le mode single
    parser.add_argument('url', nargs='?',
                       help='URL √† scanner (mode single)')
    
    # Arguments pour le mode multiple
    parser.add_argument('-f', '--file',
                       help='Fichier contenant les URLs √† scanner (mode multiple)')
    parser.add_argument('--workers', type=int, default=3,
                       help='Nombre de workers parall√®les (d√©faut: 3)')
    
    # Arguments g√©n√©raux
    parser.add_argument('--no-report', action='store_true',
                       help='Ne pas g√©n√©rer de rapport HTML')
    parser.add_argument('--timeout', type=int, default=10,
                       help='Timeout pour les requ√™tes en secondes (d√©faut: 10)')
    
    return parser

def main():
    """Fonction principale"""
    parser = create_parser()
    args = parser.parse_args()
    
    # Cr√©er l'orchestrateur principal
    orchestrator = ScannerVulnerabilitesWeb()
    
    # Initialiser le scanner
    if not orchestrator.initialize_scanner():
        print(f"{Fore.RED}‚ùå √âchec de l'initialisation du scanner")
        sys.exit(1)
    
    # Traitement selon le mode demand√©
    success = True
    
    if args.mode == 'single':
        if not args.url:
            print(f"{Fore.RED}‚ùå URL requise pour le mode single")
            sys.exit(1)
        success = orchestrator.scan_single_url(args)
        
    elif args.mode == 'multiple':
        if not args.file:
            print(f"{Fore.RED}‚ùå Fichier requis pour le mode multiple")
            sys.exit(1)
        success = orchestrator.scan_multiple_urls(args)
        
    elif args.mode == 'stats':
        success = orchestrator.show_statistics()
        
    elif args.mode == 'status':
        orchestrator.show_system_status()
    
    # Code de sortie
    exit_code = 0 if success else 1
    if success:
        print(f"\n{Fore.GREEN}üéâ Op√©ration termin√©e avec succ√®s!")
    else:
        print(f"\n{Fore.RED}‚ùå Op√©ration √©chou√©e")
    
    sys.exit(exit_code)

if __name__ == "__main__":
    main()