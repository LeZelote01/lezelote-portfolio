#!/usr/bin/env python3
"""
üé≠ D√âMONSTRATIONS - GESTIONNAIRE DE MOTS DE PASSE
===============================================

Ce fichier contient toutes les d√©monstrations du gestionnaire de mots de passe.
S√©par√© des scripts principaux pour maintenir un code de production propre.

Fonctionnalit√©s d√©montr√©es :
- Authentification biom√©trique
- Surveillance des violations de donn√©es
- Synchronisation cloud
- API REST et mobile
- Audit de s√©curit√©
- Partage s√©curis√© entre utilisateurs
"""

import sys
import os
import time
from datetime import datetime, timedelta
from colorama import init, Fore, Style

# Ajouter le r√©pertoire parent au path pour imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from gestionnaire_mdp import GestionnaireMDP
    from biometric_auth import BiometricAuthenticator
    from breach_monitor import BreachMonitor
    from security_audit import SecurityAuditor
    from cloud_sync import CloudSyncManager
    from secure_sharing import SecureSharingManager
    from passphrase_generator import PassphraseGenerator
    print("‚úÖ Modules principaux import√©s avec succ√®s")
except ImportError as e:
    print(f"{Fore.RED}‚ùå Erreur d'importation: {e}")
    print(f"{Fore.YELLOW}üí° Ex√©cutez ce script depuis le dossier parent")
    sys.exit(1)

init(autoreset=True)

def demo_biometric_auth():
    """D√©monstration de l'authentification biom√©trique"""
    print(f"\n{Fore.CYAN}üîê D√âMONSTRATION AUTHENTIFICATION BIOM√âTRIQUE")
    print("=" * 60)
    
    # Initialiser l'authenticateur biom√©trique
    auth = BiometricAuthenticator()
    
    print(f"\n{Fore.YELLOW}üîç D√©tection des m√©thodes disponibles:")
    methods = auth.get_available_methods()
    for method, available in methods.items():
        status = "‚úÖ Disponible" if available else "‚ùå Non disponible"
        print(f"   {method}: {status}")
    
    # Test avec m√©thode simul√©e
    print(f"\n{Fore.YELLOW}üß™ Test d'authentification simul√©e:")
    for method in ['touchid', 'windows_hello', 'linux_fprintd']:
        if methods.get(method, False):
            print(f"\n   M√©thode test√©e: {method}")
            
            # G√©n√©rer un token de d√©monstration
            master_password = "demo_master_password"
            token = auth.generate_biometric_token(master_password, method, expires_hours=1)
            
            if token:
                print(f"   ‚úÖ Token g√©n√©r√©: {token[:20]}...")
                
                # V√©rifier le token
                is_valid = auth.verify_biometric_token(token, master_password)
                print(f"   ‚úÖ V√©rification token: {'R√©ussi' if is_valid else '√âchec'}")
                
                # Test avec token expir√© (simulation)
                print(f"   üìä Statistiques d'utilisation:")
                stats = auth.get_usage_statistics()
                for key, value in stats.items():
                    print(f"      {key}: {value}")
            else:
                print(f"   ‚ùå √âchec g√©n√©ration token")
            break
    else:
        print(f"   ‚ö†Ô∏è Aucune m√©thode biom√©trique disponible en d√©monstration")
    
    return auth

def demo_breach_monitoring():
    """D√©monstration du syst√®me de surveillance des violations"""
    print(f"\n{Fore.BLUE}üö® D√âMONSTRATION - SURVEILLANCE DES VIOLATIONS")
    print("=" * 60)
    
    # Initialiser le gestionnaire principal
    manager = GestionnaireMDP()
    
    # Tenter l'authentification avec mot de passe de d√©mo
    demo_password = "demo123!"
    print(f"{Fore.YELLOW}üîë Authentification avec mot de passe de d√©monstration...")
    
    if not manager.authenticate(demo_password):
        print(f"{Fore.CYAN}‚ÑπÔ∏è Cr√©ation d'un compte de d√©monstration...")
        manager.create_account(demo_password)
        if not manager.authenticate(demo_password):
            print(f"{Fore.RED}‚ùå Impossible de s'authentifier avec le compte de d√©mo")
            return None
    
    print(f"{Fore.GREEN}‚úÖ Authentification r√©ussie")
    
    # Initialiser le moniteur de violations
    breach_monitor = BreachMonitor(manager)
    
    # Ajouter quelques mots de passe de d√©monstration
    demo_passwords = [
        {"site": "demo-site1.com", "username": "user@demo1.com", "password": "password123"},
        {"site": "demo-site2.com", "username": "user@demo2.com", "password": "123456"},
        {"site": "demo-site3.com", "username": "user@demo3.com", "password": "qwerty"},
        {"site": "demo-site4.com", "username": "user@demo4.com", "password": "letmein"}
    ]
    
    print(f"\n{Fore.YELLOW}üìù Ajout de mots de passe de d√©monstration...")
    for pwd_data in demo_passwords:
        manager.add_password(
            pwd_data["site"], 
            pwd_data["username"], 
            pwd_data["password"],
            "Demo"
        )
        print(f"   ‚úÖ Ajout√©: {pwd_data['site']}")
    
    # V√©rifier les violations
    print(f"\n{Fore.YELLOW}üîç V√©rification des violations de donn√©es...")
    violations_found = breach_monitor.check_all_passwords()
    
    print(f"\n{Fore.CYAN}üìä R√©sultats de la v√©rification:")
    print(f"   Violations d√©tect√©es: {len(violations_found)}")
    
    for violation in violations_found:
        print(f"   üö® {violation['site']}: {violation['breach_info'].get('Name', 'Violation d√©tect√©e')}")
    
    # G√©n√©rer un rapport
    print(f"\n{Fore.YELLOW}üìã G√©n√©ration du rapport de violations...")
    report = breach_monitor.generate_breach_report()
    
    print(f"\n{Fore.CYAN}üìà Rapport de s√©curit√©:")
    print(f"   Comptes surveill√©s: {report['total_accounts']}")
    print(f"   Violations trouv√©es: {report['breached_accounts']}")
    print(f"   Score de s√©curit√©: {report['security_score']}/100")
    print(f"   Derni√®re v√©rification: {report['last_check']}")
    
    return breach_monitor

def demo_cloud_sync():
    """D√©monstration de la synchronisation cloud"""
    print(f"\n{Fore.BLUE}‚òÅÔ∏è D√âMONSTRATION - SYNCHRONISATION CLOUD")
    print("=" * 60)
    
    # Initialiser le gestionnaire principal
    manager = GestionnaireMDP()
    
    # Authentification
    demo_password = "demo123!"
    if not manager.authenticate(demo_password):
        manager.create_account(demo_password)
        manager.authenticate(demo_password)
    
    # Initialiser le gestionnaire de sync cloud
    cloud_sync = CloudSyncManager(manager)
    
    print(f"\n{Fore.YELLOW}‚öôÔ∏è Configuration des services cloud:")
    
    # Simuler la configuration des services
    services_config = {
        "google_drive": {
            "enabled": True,
            "client_id": "demo-client-id",
            "status": "Configur√© (simulation)"
        },
        "dropbox": {
            "enabled": True,
            "app_key": "demo-app-key",
            "status": "Configur√© (simulation)"
        }
    }
    
    for service, config in services_config.items():
        status_icon = "‚úÖ" if config["enabled"] else "‚ùå"
        print(f"   {status_icon} {service}: {config['status']}")
    
    # Simulation de synchronisation
    print(f"\n{Fore.YELLOW}üîÑ Simulation de synchronisation...")
    
    sync_operations = [
        "Chiffrement des donn√©es locales",
        "Upload vers Google Drive", 
        "Upload vers Dropbox",
        "V√©rification de l'int√©grit√©",
        "Mise √† jour des m√©tadonn√©es"
    ]
    
    for operation in sync_operations:
        print(f"   üîÑ {operation}...")
        time.sleep(0.5)  # Simulation du temps de traitement
        print(f"   ‚úÖ {operation} - Termin√©")
    
    # Statistiques de synchronisation
    print(f"\n{Fore.CYAN}üìä Statistiques de synchronisation:")
    stats = {
        "Derni√®re sync": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "Donn√©es synchronis√©es": "2.3 MB",
        "Conflits r√©solus": 0,
        "Services actifs": "Google Drive, Dropbox"
    }
    
    for key, value in stats.items():
        print(f"   {key}: {value}")
    
    return cloud_sync

def demo_security_audit():
    """D√©monstration de l'audit de s√©curit√©"""
    print(f"\n{Fore.BLUE}üîç D√âMONSTRATION - AUDIT DE S√âCURIT√â")
    print("=" * 60)
    
    # Initialiser le gestionnaire principal
    manager = GestionnaireMDP()
    
    # Authentification
    demo_password = "demo123!"
    if not manager.authenticate(demo_password):
        manager.create_account(demo_password)
        manager.authenticate(demo_password)
    
    # Initialiser l'auditeur de s√©curit√©
    auditor = SecurityAuditor(manager)
    
    # Ajouter des mots de passe avec diff√©rents niveaux de s√©curit√©
    test_passwords = [
        {"site": "bank-demo.com", "username": "user@bank.com", "password": "Tr0ub4dor&3", "category": "Banque"},
        {"site": "social-demo.com", "username": "user@social.com", "password": "password123", "category": "Social"},
        {"site": "work-demo.com", "username": "user@work.com", "password": "P@ssw0rd2024!", "category": "Travail"},
        {"site": "email-demo.com", "username": "user@email.com", "password": "123456", "category": "Email"},
        {"site": "secure-demo.com", "username": "user@secure.com", "password": "Xy9$mK#nB@4vL&8qZ", "category": "S√©curit√©"}
    ]
    
    print(f"\n{Fore.YELLOW}üìù Ajout de mots de passe de test...")
    for pwd_data in test_passwords:
        manager.add_password(
            pwd_data["site"],
            pwd_data["username"], 
            pwd_data["password"],
            pwd_data["category"]
        )
        print(f"   ‚úÖ {pwd_data['site']}")
    
    # Effectuer l'audit complet
    print(f"\n{Fore.YELLOW}üîç Audit de s√©curit√© complet...")
    audit_result = auditor.full_security_audit()
    
    # Afficher les r√©sultats
    print(f"\n{Fore.CYAN}üìä R√âSULTATS DE L'AUDIT:")
    print("=" * 40)
    print(f"Score global: {audit_result['overall_score']}/100")
    print(f"Mots de passe analys√©s: {audit_result['total_passwords']}")
    print(f"Mots de passe compromis: {audit_result['compromised_count']}")
    print(f"Mots de passe faibles: {audit_result['weak_passwords']}")
    print(f"Mots de passe r√©utilis√©s: {audit_result['reused_passwords']}")
    
    print(f"\n{Fore.YELLOW}üè∑Ô∏è ANALYSE PAR CAT√âGORIE:")
    for category, data in audit_result['by_category'].items():
        print(f"   {category}: {data['count']} mots de passe, score moyen: {data['avg_score']:.1f}")
    
    print(f"\n{Fore.RED}‚ö†Ô∏è RECOMMANDATIONS:")
    for recommendation in audit_result['recommendations']:
        print(f"   ‚Ä¢ {recommendation}")
    
    return auditor

def demo_secure_sharing():
    """D√©monstration du partage s√©curis√©"""
    print(f"\n{Fore.BLUE}ü§ù D√âMONSTRATION - PARTAGE S√âCURIS√â")
    print("=" * 60)
    
    # Initialiser le gestionnaire principal
    manager = GestionnaireMDP()
    
    # Authentification
    demo_password = "demo123!"
    if not manager.authenticate(demo_password):
        manager.create_account(demo_password)
        manager.authenticate(demo_password)
    
    # Initialiser le gestionnaire de partage
    sharing_manager = SecureSharingManager(manager)
    
    # Ajouter un mot de passe √† partager
    print(f"\n{Fore.YELLOW}üìù Cr√©ation d'un mot de passe √† partager...")
    manager.add_password(
        "shared-demo.com",
        "shared-user@demo.com", 
        "SharedP@ssw0rd123!",
        "Partage"
    )
    
    # Simuler le partage avec un utilisateur
    print(f"\n{Fore.YELLOW}üë• Partage avec utilisateur d√©monstration...")
    
    share_details = {
        "password_id": "shared-demo.com",
        "recipient": "colleague@demo.com",
        "permissions": ["read", "use"],
        "expires": datetime.now() + timedelta(days=7)
    }
    
    print(f"   Destinataire: {share_details['recipient']}")
    print(f"   Permissions: {', '.join(share_details['permissions'])}")
    print(f"   Expire le: {share_details['expires'].strftime('%Y-%m-%d')}")
    
    # Simulation des √©tapes de partage
    sharing_steps = [
        "G√©n√©ration de cl√©s de chiffrement asym√©trique",
        "Chiffrement du mot de passe avec cl√© publique",
        "Cr√©ation du lien de partage s√©curis√©",
        "Envoi de la notification au destinataire",
        "Configuration des permissions d'acc√®s"
    ]
    
    for step in sharing_steps:
        print(f"   üîÑ {step}...")
        time.sleep(0.3)
        print(f"   ‚úÖ {step} - Termin√©")
    
    # Afficher les statistiques de partage
    print(f"\n{Fore.CYAN}üìä Statistiques de partage:")
    sharing_stats = {
        "Mots de passe partag√©s": 1,
        "Utilisateurs autoris√©s": 1,
        "Liens actifs": 1,
        "Acc√®s cette semaine": 0
    }
    
    for key, value in sharing_stats.items():
        print(f"   {key}: {value}")
    
    return sharing_manager

def demo_passphrase_generation():
    """D√©monstration du g√©n√©rateur de phrases de passe"""
    print(f"\n{Fore.BLUE}üé≤ D√âMONSTRATION - G√âN√âRATEUR DE PHRASES DE PASSE")
    print("=" * 60)
    
    # Initialiser le g√©n√©rateur
    generator = PassphraseGenerator()
    
    print(f"\n{Fore.YELLOW}üî§ G√©n√©ration de phrases de passe XKCD:")
    
    # G√©n√©rer diff√©rents types de phrases de passe
    passphrase_configs = [
        {"words": 4, "separator": "-", "numbers": False, "capitalize": False},
        {"words": 5, "separator": " ", "numbers": True, "capitalize": True},
        {"words": 3, "separator": "_", "numbers": True, "capitalize": True},
        {"words": 6, "separator": ".", "numbers": False, "capitalize": False}
    ]
    
    for i, config in enumerate(passphrase_configs, 1):
        print(f"\n   Configuration {i}:")
        print(f"   Mots: {config['words']}, S√©parateur: '{config['separator']}'")
        print(f"   Chiffres: {config['numbers']}, Capitalisation: {config['capitalize']}")
        
        passphrase = generator.generate_passphrase(**config)
        entropy = generator.calculate_entropy(passphrase)
        
        print(f"   ‚úÖ Phrase: {passphrase}")
        print(f"   üîí Entropie: {entropy:.1f} bits")
        print(f"   ‚è±Ô∏è Temps de crack estim√©: {generator.estimate_crack_time(entropy)}")
    
    # Statistiques du g√©n√©rateur
    print(f"\n{Fore.CYAN}üìä Statistiques du g√©n√©rateur:")
    stats = generator.get_generator_stats()
    for key, value in stats.items():
        print(f"   {key}: {value}")
    
    return generator

def demo_complete_workflow():
    """D√©monstration du workflow complet"""
    print(f"\n{Fore.BLUE}üéØ D√âMONSTRATION - WORKFLOW COMPLET")
    print("=" * 70)
    
    print(f"{Fore.CYAN}Phase 1: Authentification biom√©trique...")
    auth = demo_biometric_auth()
    time.sleep(1)
    
    print(f"\n{Fore.CYAN}Phase 2: Audit de s√©curit√©...")
    auditor = demo_security_audit()
    time.sleep(1)
    
    print(f"\n{Fore.CYAN}Phase 3: Surveillance des violations...")
    breach_monitor = demo_breach_monitoring()
    time.sleep(1)
    
    print(f"\n{Fore.CYAN}Phase 4: Synchronisation cloud...")
    cloud_sync = demo_cloud_sync()
    time.sleep(1)
    
    print(f"\n{Fore.CYAN}Phase 5: Partage s√©curis√©...")
    sharing = demo_secure_sharing()
    time.sleep(1)
    
    print(f"\n{Fore.CYAN}Phase 6: G√©n√©ration de phrases de passe...")
    generator = demo_passphrase_generation()
    
    print(f"\n{Fore.GREEN}üéâ D√âMONSTRATION COMPL√àTE TERMIN√âE!")
    print("=" * 70)
    print(f"{Fore.YELLOW}üìã R√©sum√© des fonctionnalit√©s test√©es:")
    print(f"   ‚úÖ Authentification biom√©trique")
    print(f"   ‚úÖ Audit de s√©curit√© complet") 
    print(f"   ‚úÖ Surveillance des violations")
    print(f"   ‚úÖ Synchronisation cloud chiffr√©e")
    print(f"   ‚úÖ Partage s√©curis√© entre utilisateurs")
    print(f"   ‚úÖ G√©n√©ration de phrases de passe")
    
    return {
        'auth': auth,
        'auditor': auditor,
        'breach_monitor': breach_monitor,
        'cloud_sync': cloud_sync,
        'sharing': sharing,
        'generator': generator
    }

def interactive_demo_menu():
    """Menu interactif pour les d√©monstrations"""
    while True:
        print(f"\n{Fore.CYAN}üé≠ MENU DES D√âMONSTRATIONS - GESTIONNAIRE DE MOTS DE PASSE")
        print("=" * 70)
        print(f"{Fore.YELLOW}1. Authentification biom√©trique")
        print(f"{Fore.YELLOW}2. Audit de s√©curit√©")
        print(f"{Fore.YELLOW}3. Surveillance des violations")
        print(f"{Fore.YELLOW}4. Synchronisation cloud")
        print(f"{Fore.YELLOW}5. Partage s√©curis√©")
        print(f"{Fore.YELLOW}6. G√©n√©ration de phrases de passe")
        print(f"{Fore.YELLOW}7. Workflow complet (toutes les d√©mos)")
        print(f"{Fore.YELLOW}0. Quitter")
        
        try:
            choice = input(f"\n{Fore.WHITE}Votre choix: ").strip()
            
            if choice == "1":
                demo_biometric_auth()
            elif choice == "2":
                demo_security_audit()
            elif choice == "3":
                demo_breach_monitoring()
            elif choice == "4":
                demo_cloud_sync()
            elif choice == "5":
                demo_secure_sharing()
            elif choice == "6":
                demo_passphrase_generation()
            elif choice == "7":
                demo_complete_workflow()
            elif choice == "0":
                print(f"\n{Fore.GREEN}üëã Au revoir!")
                break
            else:
                print(f"\n{Fore.RED}‚ùå Choix invalide. Veuillez recommencer.")
            
            if choice != "0":
                input(f"\n{Fore.CYAN}üìù Appuyez sur Entr√©e pour continuer...")
                
        except KeyboardInterrupt:
            print(f"\n\n{Fore.YELLOW}üõë Arr√™t demand√© par l'utilisateur")
            break
        except Exception as e:
            print(f"\n{Fore.RED}‚ùå Erreur: {e}")
            input(f"\n{Fore.CYAN}üìù Appuyez sur Entr√©e pour continuer...")

if __name__ == "__main__":
    print(f"{Fore.BLUE}üîê D√âMONSTRATIONS - GESTIONNAIRE DE MOTS DE PASSE")
    print("=" * 70)
    print(f"{Fore.CYAN}üìÅ Fichier de d√©monstration s√©par√© des scripts principaux")
    print(f"{Fore.CYAN}üéØ Contient toutes les fonctions de test et de d√©monstration")
    
    # Lancer le menu interactif par d√©faut
    interactive_demo_menu()