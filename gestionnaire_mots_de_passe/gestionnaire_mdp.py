#!/usr/bin/env python3
"""
Gestionnaire de Mots de Passe
Application compl√®te de gestion de mots de passe avec chiffrement

Fonctionnalit√©s:
- Stockage chiffr√© des mots de passe
- G√©n√©ration automatique de mots de passe s√©curis√©s
- Cat√©gorisation des comptes
- Import/Export s√©curis√©
- Authentification ma√Ætre robuste
- Interface en ligne de commande
"""

import sqlite3
import json
import uuid
from datetime import datetime, timedelta
import secrets
import string
import bcrypt
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import base64
import os
import getpass
import pyperclip
from colorama import init, Fore, Style
from tabulate import tabulate
import argparse
import sys

# Initialize colorama
init(autoreset=True)

# Imports pour la synchronisation cloud
try:
    from cloud_sync import cloud_sync_manager
    from cloud_config import cloud_config
    from cloud_auth import cloud_auth
    CLOUD_SYNC_AVAILABLE = True
except ImportError:
    CLOUD_SYNC_AVAILABLE = False
    print(f"{Fore.YELLOW}‚ö†Ô∏è Synchronisation cloud non disponible. Installez les d√©pendances avec: pip install -r requirements_cloud.txt")

class GestionnaireMDP:
    def __init__(self, db_path="passwords.db"):
        self.db_path = db_path
        self.cipher_suite = None
        self.is_authenticated = False
        self.session_timeout = 15  # minutes
        self.last_activity = None
        
        # Cr√©er la base de donn√©es si elle n'existe pas
        self.init_database()
        
        print(f"{Fore.GREEN}üîê Gestionnaire de Mots de Passe initialis√©")

    def init_database(self):
        """Initialiser la base de donn√©es SQLite"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Table pour le mot de passe ma√Ætre
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS master_password (
                id INTEGER PRIMARY KEY,
                password_hash TEXT NOT NULL,
                salt TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_changed TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Table pour les mots de passe stock√©s
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS passwords (
                id TEXT PRIMARY KEY,
                title TEXT NOT NULL,
                username TEXT,
                password_encrypted TEXT NOT NULL,
                url TEXT,
                notes TEXT,
                category TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_accessed TIMESTAMP,
                access_count INTEGER DEFAULT 0
            )
        ''')
        
        # Table pour les cat√©gories
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS categories (
                id INTEGER PRIMARY KEY,
                name TEXT UNIQUE NOT NULL,
                description TEXT,
                color TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Ins√©rer les cat√©gories par d√©faut
        default_categories = [
            ('Personnel', 'Comptes personnels', '#2196F3'),
            ('Travail', 'Comptes professionnels', '#4CAF50'),
            ('R√©seaux Sociaux', 'Facebook, Twitter, etc.', '#FF9800'),
            ('Email', 'Comptes de messagerie', '#9C27B0'),
            ('Banque', 'Services bancaires', '#F44336'),
            ('Streaming', 'Netflix, Spotify, etc.', '#E91E63'),
            ('Autre', 'Autres comptes', '#607D8B')
        ]
        
        cursor.executemany('''
            INSERT OR IGNORE INTO categories (name, description, color)
            VALUES (?, ?, ?)
        ''', default_categories)
        
        conn.commit()
        conn.close()

    def derive_key(self, password, salt):
        """D√©river une cl√© de chiffrement √† partir du mot de passe ma√Ætre"""
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
        )
        key = base64.urlsafe_b64encode(kdf.derive(password.encode()))
        return key

    def setup_master_password(self, password):
        """Configurer le mot de passe ma√Ætre"""
        if self.has_master_password():
            print(f"{Fore.RED}‚ùå Un mot de passe ma√Ætre existe d√©j√†")
            return False
        
        # G√©n√©rer un salt al√©atoire
        salt = os.urandom(32)
        
        # Hasher le mot de passe pour stockage
        password_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
        
        # Stocker dans la base
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO master_password (password_hash, salt)
            VALUES (?, ?)
        ''', (password_hash.decode('utf-8'), base64.b64encode(salt).decode('utf-8')))
        conn.commit()
        conn.close()
        
        print(f"{Fore.GREEN}‚úì Mot de passe ma√Ætre configur√© avec succ√®s")
        return True

    def has_master_password(self):
        """V√©rifier si un mot de passe ma√Ætre existe"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM master_password')
        count = cursor.fetchone()[0]
        conn.close()
        return count > 0

    def authenticate(self, password):
        """Authentifier avec le mot de passe ma√Ætre"""
        if not self.has_master_password():
            print(f"{Fore.RED}‚ùå Aucun mot de passe ma√Ætre configur√©")
            return False
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT password_hash, salt FROM master_password ORDER BY id DESC LIMIT 1')
        result = cursor.fetchone()
        conn.close()
        
        if result:
            stored_hash, salt_b64 = result
            salt = base64.b64decode(salt_b64.encode('utf-8'))
            
            # V√©rifier le mot de passe
            if bcrypt.checkpw(password.encode('utf-8'), stored_hash.encode('utf-8')):
                # Initialiser le chiffrement
                key = self.derive_key(password, salt)
                self.cipher_suite = Fernet(key)
                self.is_authenticated = True
                self.last_activity = datetime.now()
                
                print(f"{Fore.GREEN}‚úì Authentification r√©ussie")
                return True
        
        print(f"{Fore.RED}‚ùå Mot de passe incorrect")
        return False

    def check_session(self):
        """V√©rifier si la session est encore valide"""
        if not self.is_authenticated:
            return False
        
        if self.last_activity and datetime.now() - self.last_activity > timedelta(minutes=self.session_timeout):
            self.logout()
            print(f"{Fore.YELLOW}‚ö†Ô∏è  Session expir√©e. Veuillez vous reconnecter.")
            return False
        
        self.last_activity = datetime.now()
        return True

    def logout(self):
        """D√©connecter l'utilisateur"""
        self.cipher_suite = None
        self.is_authenticated = False
        self.last_activity = None
        print(f"{Fore.YELLOW}üö™ D√©connexion effectu√©e")

    def generate_password(self, length=16, include_symbols=True, include_numbers=True, 
                         include_uppercase=True, include_lowercase=True):
        """G√©n√©rer un mot de passe s√©curis√©"""
        if length < 4:
            length = 4
        
        characters = ""
        required_chars = []
        
        if include_lowercase:
            characters += string.ascii_lowercase
            required_chars.append(secrets.choice(string.ascii_lowercase))
        
        if include_uppercase:
            characters += string.ascii_uppercase
            required_chars.append(secrets.choice(string.ascii_uppercase))
        
        if include_numbers:
            characters += string.digits
            required_chars.append(secrets.choice(string.digits))
        
        if include_symbols:
            symbols = "!@#$%^&*()_+-=[]{}|;:,.<>?"
            characters += symbols
            required_chars.append(secrets.choice(symbols))
        
        if not characters:
            characters = string.ascii_letters + string.digits
        
        # G√©n√©rer le reste du mot de passe
        remaining_length = length - len(required_chars)
        password_list = required_chars + [secrets.choice(characters) for _ in range(remaining_length)]
        
        # M√©langer le mot de passe
        secrets.SystemRandom().shuffle(password_list)
        password = ''.join(password_list)
        
        return password

    def encrypt_password(self, password):
        """Chiffrer un mot de passe"""
        if not self.cipher_suite:
            raise Exception("Non authentifi√©")
        return self.cipher_suite.encrypt(password.encode()).decode()

    def decrypt_password(self, encrypted_password):
        """D√©chiffrer un mot de passe"""
        if not self.cipher_suite:
            raise Exception("Non authentifi√©")
        return self.cipher_suite.decrypt(encrypted_password.encode()).decode()

    def add_password(self, title, username, password, url="", notes="", category="Autre"):
        """Ajouter un nouveau mot de passe"""
        if not self.check_session():
            return False
        
        # V√©rifier que la cat√©gorie existe
        if not self.category_exists(category):
            print(f"{Fore.YELLOW}‚ö†Ô∏è  Cat√©gorie '{category}' introuvable, utilisation de 'Autre'")
            category = "Autre"
        
        # Chiffrer le mot de passe
        try:
            encrypted_password = self.encrypt_password(password)
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur de chiffrement: {e}")
            return False
        
        # G√©n√©rer un ID unique
        password_id = str(uuid.uuid4())
        
        # Ins√©rer dans la base
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                INSERT INTO passwords (id, title, username, password_encrypted, url, notes, category)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (password_id, title, username, encrypted_password, url, notes, category))
            conn.commit()
            
            print(f"{Fore.GREEN}‚úì Mot de passe ajout√© avec succ√®s")
            print(f"  ID: {password_id}")
            print(f"  Titre: {title}")
            print(f"  Cat√©gorie: {category}")
            
            return password_id
            
        except sqlite3.Error as e:
            print(f"{Fore.RED}‚ùå Erreur de base de donn√©es: {e}")
            return False
        finally:
            conn.close()

    def get_password(self, password_id):
        """R√©cup√©rer un mot de passe par ID"""
        if not self.check_session():
            return None
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT id, title, username, password_encrypted, url, notes, category,
                       created_at, updated_at, access_count
                FROM passwords WHERE id = ?
            ''', (password_id,))
            
            result = cursor.fetchone()
            if result:
                # Mettre √† jour les statistiques d'acc√®s
                cursor.execute('''
                    UPDATE passwords 
                    SET last_accessed = CURRENT_TIMESTAMP, 
                        access_count = access_count + 1
                    WHERE id = ?
                ''', (password_id,))
                conn.commit()
                
                # D√©chiffrer le mot de passe
                encrypted_password = result[3]
                decrypted_password = self.decrypt_password(encrypted_password)
                
                return {
                    'id': result[0],
                    'title': result[1],
                    'username': result[2],
                    'password': decrypted_password,
                    'url': result[4],
                    'notes': result[5],
                    'category': result[6],
                    'created_at': result[7],
                    'updated_at': result[8],
                    'access_count': result[9] + 1
                }
            
            return None
            
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur lors de la r√©cup√©ration: {e}")
            return None
        finally:
            conn.close()

    def list_passwords(self, category=None, search_term=None):
        """Lister les mots de passe avec filtres optionnels"""
        if not self.check_session():
            return []
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        query = '''
            SELECT id, title, username, url, category, created_at, access_count
            FROM passwords WHERE 1=1
        '''
        params = []
        
        if category:
            query += ' AND category = ?'
            params.append(category)
        
        if search_term:
            query += ' AND (title LIKE ? OR username LIKE ? OR url LIKE ?)'
            search_pattern = f'%{search_term}%'
            params.extend([search_pattern, search_pattern, search_pattern])
        
        query += ' ORDER BY title'
        
        try:
            cursor.execute(query, params)
            results = cursor.fetchall()
            
            passwords = []
            for row in results:
                passwords.append({
                    'id': row[0],
                    'title': row[1],
                    'username': row[2],
                    'url': row[3],
                    'category': row[4],
                    'created_at': row[5],
                    'access_count': row[6]
                })
            
            return passwords
            
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur lors de la liste: {e}")
            return []
        finally:
            conn.close()

    def update_password(self, password_id, **kwargs):
        """Mettre √† jour un mot de passe"""
        if not self.check_session():
            return False
        
        # V√©rifier que le mot de passe existe
        existing = self.get_password(password_id)
        if not existing:
            print(f"{Fore.RED}‚ùå Mot de passe introuvable")
            return False
        
        # Construire la requ√™te de mise √† jour
        update_fields = []
        params = []
        
        for field, value in kwargs.items():
            if field in ['title', 'username', 'url', 'notes', 'category']:
                update_fields.append(f'{field} = ?')
                params.append(value)
            elif field == 'password':
                # Chiffrer le nouveau mot de passe
                encrypted_password = self.encrypt_password(value)
                update_fields.append('password_encrypted = ?')
                params.append(encrypted_password)
        
        if not update_fields:
            print(f"{Fore.YELLOW}‚ö†Ô∏è  Aucun champ valide √† mettre √† jour")
            return False
        
        # Ajouter la date de mise √† jour
        update_fields.append('updated_at = CURRENT_TIMESTAMP')
        params.append(password_id)
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            query = f"UPDATE passwords SET {', '.join(update_fields)} WHERE id = ?"
            cursor.execute(query, params)
            conn.commit()
            
            print(f"{Fore.GREEN}‚úì Mot de passe mis √† jour avec succ√®s")
            return True
            
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur lors de la mise √† jour: {e}")
            return False
        finally:
            conn.close()

    def delete_password(self, password_id):
        """Supprimer un mot de passe"""
        if not self.check_session():
            return False
        
        # V√©rifier que le mot de passe existe
        existing = self.get_password(password_id)
        if not existing:
            print(f"{Fore.RED}‚ùå Mot de passe introuvable")
            return False
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute('DELETE FROM passwords WHERE id = ?', (password_id,))
            conn.commit()
            
            print(f"{Fore.GREEN}‚úì Mot de passe supprim√©: {existing['title']}")
            return True
            
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur lors de la suppression: {e}")
            return False
        finally:
            conn.close()

    def category_exists(self, category_name):
        """V√©rifier si une cat√©gorie existe"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM categories WHERE name = ?', (category_name,))
        count = cursor.fetchone()[0]
        conn.close()
        return count > 0

    def list_categories(self):
        """Lister toutes les cat√©gories"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT name, description, color FROM categories ORDER BY name')
        categories = cursor.fetchall()
        conn.close()
        return categories

    def add_category(self, name, description="", color="#607D8B"):
        """Ajouter une nouvelle cat√©gorie"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                INSERT INTO categories (name, description, color)
                VALUES (?, ?, ?)
            ''', (name, description, color))
            conn.commit()
            print(f"{Fore.GREEN}‚úì Cat√©gorie '{name}' ajout√©e")
            return True
        except sqlite3.IntegrityError:
            print(f"{Fore.RED}‚ùå La cat√©gorie '{name}' existe d√©j√†")
            return False
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur: {e}")
            return False
        finally:
            conn.close()

    def export_data(self, filepath, include_passwords=False):
        """Exporter les donn√©es vers un fichier JSON"""
        if not self.check_session():
            return False
        
        try:
            export_data = {
                'export_info': {
                    'created_at': datetime.now().isoformat(),
                    'version': '1.0',
                    'include_passwords': include_passwords
                },
                'categories': [],
                'passwords': []
            }
            
            # Exporter les cat√©gories
            categories = self.list_categories()
            for cat in categories:
                export_data['categories'].append({
                    'name': cat[0],
                    'description': cat[1],
                    'color': cat[2]
                })
            
            # Exporter les mots de passe
            passwords = self.list_passwords()
            for pwd in passwords:
                pwd_data = {
                    'id': pwd['id'],
                    'title': pwd['title'],
                    'username': pwd['username'],
                    'url': pwd['url'],
                    'category': pwd['category'],
                    'created_at': pwd['created_at'],
                    'access_count': pwd['access_count']
                }
                
                if include_passwords:
                    # R√©cup√©rer le mot de passe d√©chiffr√©
                    full_pwd = self.get_password(pwd['id'])
                    if full_pwd:
                        pwd_data['password'] = full_pwd['password']
                        pwd_data['notes'] = full_pwd['notes']
                
                export_data['passwords'].append(pwd_data)
            
            # Sauvegarder dans le fichier
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False)
            
            print(f"{Fore.GREEN}‚úì Donn√©es export√©es vers {filepath}")
            print(f"  {len(export_data['categories'])} cat√©gories")
            print(f"  {len(export_data['passwords'])} mots de passe")
            
            return True
            
        except Exception as e:
            print(f"{Fore.RED}‚ùå Erreur lors de l'export: {e}")
            return False

    def get_statistics(self):
        """Obtenir des statistiques d'utilisation"""
        if not self.check_session():
            return None
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        stats = {}
        
        # Nombre total de mots de passe
        cursor.execute('SELECT COUNT(*) FROM passwords')
        stats['total_passwords'] = cursor.fetchone()[0]
        
        # R√©partition par cat√©gorie
        cursor.execute('''
            SELECT category, COUNT(*) 
            FROM passwords 
            GROUP BY category 
            ORDER BY COUNT(*) DESC
        ''')
        stats['by_category'] = cursor.fetchall()
        
        # Mots de passe les plus access√©s
        cursor.execute('''
            SELECT title, access_count 
            FROM passwords 
            WHERE access_count > 0
            ORDER BY access_count DESC 
            LIMIT 5
        ''')
        stats['most_accessed'] = cursor.fetchall()
        
        # Anciennet√© des mots de passe
        cursor.execute('''
            SELECT 
                COUNT(CASE WHEN date(created_at) > date('now', '-30 days') THEN 1 END) as recent,
                COUNT(CASE WHEN date(created_at) BETWEEN date('now', '-90 days') AND date('now', '-30 days') THEN 1 END) as medium,
                COUNT(CASE WHEN date(created_at) < date('now', '-90 days') THEN 1 END) as old
            FROM passwords
        ''')
        age_stats = cursor.fetchone()
        stats['age_distribution'] = {
            'recent': age_stats[0],    # < 30 jours
            'medium': age_stats[1],    # 30-90 jours
            'old': age_stats[2]        # > 90 jours
        }
        
        conn.close()
        return stats

    def copy_to_clipboard(self, password_id):
        """Copier un mot de passe dans le presse-papier"""
        if not self.check_session():
            return False
        
        password_data = self.get_password(password_id)
        if password_data:
            try:
                pyperclip.copy(password_data['password'])
                print(f"{Fore.GREEN}‚úì Mot de passe copi√© dans le presse-papier")
                print(f"{Fore.YELLOW}‚ö†Ô∏è  Le presse-papier sera vid√© dans 30 secondes")
                
                # Note: Dans une vraie application, on d√©marrerait un timer pour vider
                # le presse-papier apr√®s 30 secondes
                
                return True
            except Exception as e:
                print(f"{Fore.RED}‚ùå Erreur lors de la copie: {e}")
                return False
        
        return False

    # ============ M√âTHODES DE SYNCHRONISATION CLOUD ============
    
    def is_cloud_sync_available(self):
        """V√©rifier si la synchronisation cloud est disponible"""
        return CLOUD_SYNC_AVAILABLE and cloud_sync_manager.is_cloud_sync_available()
    
    def get_cloud_sync_status(self):
        """Obtenir le statut de la synchronisation cloud"""
        if not CLOUD_SYNC_AVAILABLE:
            return {'available': False, 'error': 'Synchronisation cloud non disponible'}
        
        return cloud_sync_manager.get_sync_status()
    
    def configure_cloud_service(self, service_name: str, client_id: str, client_secret: str):
        """Configurer un service cloud"""
        if not CLOUD_SYNC_AVAILABLE:
            print(f"{Fore.RED}‚ùå Synchronisation cloud non disponible")
            return False
        
        success = cloud_config.configure_service(service_name, client_id, client_secret)
        if success:
            print(f"{Fore.GREEN}‚úì Service {service_name} configur√©")
        else:
            print(f"{Fore.RED}‚ùå Erreur lors de la configuration de {service_name}")
        
        return success
    
    def authenticate_cloud_service(self, service_name: str):
        """D√©marrer l'authentification pour un service cloud"""
        if not CLOUD_SYNC_AVAILABLE:
            print(f"{Fore.RED}‚ùå Synchronisation cloud non disponible")
            return None
        
        if not cloud_config.is_service_configured(service_name):
            print(f"{Fore.RED}‚ùå Service {service_name} non configur√©")
            return None
        
        auth_url = cloud_auth.get_authorization_url(service_name)
        if auth_url:
            print(f"{Fore.CYAN}üîó URL d'autorisation pour {service_name}:")
            print(f"{Fore.BLUE}{auth_url}")
            print(f"{Fore.YELLOW}‚ö†Ô∏è  Copiez cette URL dans votre navigateur et autorisez l'application")
            
            return auth_url
        else:
            print(f"{Fore.RED}‚ùå Impossible de g√©n√©rer l'URL d'autorisation pour {service_name}")
            return None
    
    def complete_cloud_authentication(self, service_name: str, callback_url: str):
        """Compl√©ter l'authentification cloud avec l'URL de callback"""
        if not CLOUD_SYNC_AVAILABLE:
            print(f"{Fore.RED}‚ùå Synchronisation cloud non disponible")
            return False
        
        success = cloud_auth.handle_oauth_callback(service_name, callback_url)
        if success:
            print(f"{Fore.GREEN}‚úì Authentification {service_name} r√©ussie")
            return True
        else:
            print(f"{Fore.RED}‚ùå √âchec de l'authentification {service_name}")
            return False
    
    def sync_to_cloud(self, master_password: str = None):
        """Synchroniser avec le cloud"""
        if not self.check_session():
            print(f"{Fore.RED}‚ùå Session expir√©e. Reconnectez-vous.")
            return False
        
        if not CLOUD_SYNC_AVAILABLE:
            print(f"{Fore.RED}‚ùå Synchronisation cloud non disponible")
            return False
        
        if not master_password:
            master_password = getpass.getpass("Mot de passe ma√Ætre pour le chiffrement cloud: ")
        
        print(f"{Fore.CYAN}üå•Ô∏è D√©marrage de la synchronisation cloud...")
        
        # Ajouter un callback pour les notifications
        def sync_callback(status, message, progress):
            if status == "starting":
                print(f"{Fore.CYAN}üå•Ô∏è {message}")
            elif status == "completed":
                print(f"{Fore.GREEN}‚úì {message}")
            elif status == "error":
                print(f"{Fore.RED}‚ùå {message}")
            else:
                print(f"{Fore.YELLOW}‚è≥ {message} ({progress:.1f}%)")
        
        cloud_sync_manager.add_sync_callback(sync_callback)
        
        # D√©marrer la synchronisation
        success = cloud_sync_manager.sync_with_cloud(master_password)
        
        if success:
            print(f"{Fore.GREEN}‚úÖ Synchronisation cloud termin√©e avec succ√®s!")
        else:
            print(f"{Fore.RED}‚ùå √âchec de la synchronisation cloud")
        
        return success
    
    def export_to_cloud(self, master_password: str = None):
        """Exporter vers le cloud uniquement"""
        if not self.check_session():
            print(f"{Fore.RED}‚ùå Session expir√©e. Reconnectez-vous.")
            return False
        
        if not CLOUD_SYNC_AVAILABLE:
            print(f"{Fore.RED}‚ùå Synchronisation cloud non disponible")
            return False
        
        if not master_password:
            master_password = getpass.getpass("Mot de passe ma√Ætre pour le chiffrement cloud: ")
        
        print(f"{Fore.CYAN}‚¨ÜÔ∏è Export vers le cloud...")
        
        success = cloud_sync_manager.export_to_cloud(master_password)
        
        if success:
            print(f"{Fore.GREEN}‚úÖ Export vers le cloud termin√©!")
        else:
            print(f"{Fore.RED}‚ùå √âchec de l'export vers le cloud")
        
        return success
    
    def import_from_cloud(self, master_password: str = None, merge: bool = True):
        """Importer depuis le cloud"""
        if not self.check_session():
            print(f"{Fore.RED}‚ùå Session expir√©e. Reconnectez-vous.")
            return False
        
        if not CLOUD_SYNC_AVAILABLE:
            print(f"{Fore.RED}‚ùå Synchronisation cloud non disponible")
            return False
        
        if not master_password:
            master_password = getpass.getpass("Mot de passe ma√Ætre pour le d√©chiffrement cloud: ")
        
        print(f"{Fore.CYAN}‚¨áÔ∏è Import depuis le cloud...")
        
        success = cloud_sync_manager.import_from_cloud(master_password, merge)
        
        if success:
            action = "fusionn√©s" if merge else "remplac√©s"
            print(f"{Fore.GREEN}‚úÖ Mots de passe {action} depuis le cloud!")
        else:
            print(f"{Fore.RED}‚ùå √âchec de l'import depuis le cloud")
        
        return success
    
    def get_cloud_services_status(self):
        """Obtenir le statut des services cloud"""
        if not CLOUD_SYNC_AVAILABLE:
            return {'available': False}
        
        status = {
            'available': True,
            'services': {}
        }
        
        for service_name in ['google_drive', 'dropbox']:
            service_config = cloud_config.get_service(service_name)
            status['services'][service_name] = {
                'configured': cloud_config.is_service_configured(service_name),
                'enabled': cloud_config.is_service_enabled(service_name),
                'authenticated': cloud_auth.is_authenticated(service_name) if service_config else False
            }
        
        return status

def main():
    """Interface en ligne de commande principale"""
    parser = argparse.ArgumentParser(description="Gestionnaire de Mots de Passe")
    parser.add_argument("--db", default="passwords.db", help="Chemin vers la base de donn√©es")
    parser.add_argument("--setup", action="store_true", help="Configurer le mot de passe ma√Ætre")
    
    subparsers = parser.add_subparsers(dest='command', help='Commandes disponibles')
    
    # Commande add
    add_parser = subparsers.add_parser('add', help='Ajouter un mot de passe')
    add_parser.add_argument('title', help='Titre du compte')
    add_parser.add_argument('--username', help='Nom d\'utilisateur')
    add_parser.add_argument('--password', help='Mot de passe (sera g√©n√©r√© si absent)')
    add_parser.add_argument('--url', help='URL du site')
    add_parser.add_argument('--category', default='Autre', help='Cat√©gorie')
    add_parser.add_argument('--generate', action='store_true', help='G√©n√©rer un mot de passe')
    add_parser.add_argument('--length', type=int, default=16, help='Longueur du mot de passe g√©n√©r√©')
    
    # Commande list
    list_parser = subparsers.add_parser('list', help='Lister les mots de passe')
    list_parser.add_argument('--category', help='Filtrer par cat√©gorie')
    list_parser.add_argument('--search', help='Rechercher dans les titres')
    
    # Commande get
    get_parser = subparsers.add_parser('get', help='R√©cup√©rer un mot de passe')
    get_parser.add_argument('id', help='ID du mot de passe')
    get_parser.add_argument('--copy', action='store_true', help='Copier dans le presse-papier')
    
    # Commande stats
    subparsers.add_parser('stats', help='Afficher les statistiques')
    
    # Commandes cloud
    if CLOUD_SYNC_AVAILABLE:
        # Commande cloud-config
        cloud_config_parser = subparsers.add_parser('cloud-config', help='Configurer les services cloud')
        cloud_config_parser.add_argument('service', choices=['google_drive', 'dropbox'], 
                                        help='Service √† configurer')
        cloud_config_parser.add_argument('--client-id', required=True, help='Client ID du service')
        cloud_config_parser.add_argument('--client-secret', required=True, help='Client Secret du service')
        
        # Commande cloud-auth
        cloud_auth_parser = subparsers.add_parser('cloud-auth', help='S\'authentifier √† un service cloud')
        cloud_auth_parser.add_argument('service', choices=['google_drive', 'dropbox'], 
                                      help='Service √† authentifier')
        cloud_auth_parser.add_argument('--callback-url', help='URL de callback apr√®s autorisation')
        
        # Commande cloud-status
        subparsers.add_parser('cloud-status', help='Voir le statut des services cloud')
        
        # Commande cloud-sync
        subparsers.add_parser('cloud-sync', help='Synchroniser avec le cloud')
        
        # Commande cloud-export
        subparsers.add_parser('cloud-export', help='Exporter vers le cloud')
        
        # Commande cloud-import
        cloud_import_parser = subparsers.add_parser('cloud-import', help='Importer depuis le cloud')
        cloud_import_parser.add_argument('--replace', action='store_true', 
                                        help='Remplacer au lieu de fusionner')
    
    # Commande export
    export_parser = subparsers.add_parser('export', help='Exporter les donn√©es')
    export_parser.add_argument('filepath', help='Chemin du fichier d\'export')
    export_parser.add_argument('--include-passwords', action='store_true', 
                              help='Inclure les mots de passe (dangereux!)')
    
    args = parser.parse_args()
    
    print(f"{Fore.BLUE}üîê GESTIONNAIRE DE MOTS DE PASSE")
    print("=" * 40)
    
    # Initialiser le gestionnaire
    manager = GestionnaireMDP(db_path=args.db)
    
    # Mode setup
    if args.setup:
        if manager.has_master_password():
            print(f"{Fore.RED}‚ùå Un mot de passe ma√Ætre existe d√©j√†")
            return
        
        print(f"{Fore.CYAN}Configuration du mot de passe ma√Ætre")
        while True:
            password = getpass.getpass("Mot de passe ma√Ætre: ")
            confirm = getpass.getpass("Confirmer le mot de passe: ")
            
            if password == confirm:
                if len(password) >= 8:
                    manager.setup_master_password(password)
                    break
                else:
                    print(f"{Fore.RED}‚ùå Le mot de passe doit contenir au moins 8 caract√®res")
            else:
                print(f"{Fore.RED}‚ùå Les mots de passe ne correspondent pas")
        return
    
    # V√©rifier si le mot de passe ma√Ætre existe
    if not manager.has_master_password():
        print(f"{Fore.RED}‚ùå Aucun mot de passe ma√Ætre configur√©")
        print(f"{Fore.CYAN}Utilisez --setup pour configurer le mot de passe ma√Ætre")
        return
    
    # Authentification
    password = getpass.getpass("Mot de passe ma√Ætre: ")
    if not manager.authenticate(password):
        return
    
    # Ex√©cuter la commande
    if args.command == 'add':
        # G√©n√©rer un mot de passe si demand√©
        if args.generate or not args.password:
            generated_password = manager.generate_password(length=args.length)
            print(f"{Fore.CYAN}Mot de passe g√©n√©r√©: {generated_password}")
            password_to_use = generated_password
        else:
            password_to_use = args.password
        
        manager.add_password(
            title=args.title,
            username=args.username or "",
            password=password_to_use,
            url=args.url or "",
            category=args.category
        )
    
    elif args.command == 'list':
        passwords = manager.list_passwords(category=args.category, search_term=args.search)
        
        if passwords:
            table_data = []
            for pwd in passwords:
                table_data.append([
                    pwd['id'][:8] + "...",
                    pwd['title'],
                    pwd['username'] or "-",
                    pwd['category'],
                    pwd['access_count']
                ])
            
            print(f"\n{Fore.CYAN}üìã MOTS DE PASSE ({len(passwords)} trouv√©s)")
            print(tabulate(table_data, 
                         headers=["ID", "Titre", "Utilisateur", "Cat√©gorie", "Acc√®s"],
                         tablefmt="grid"))
        else:
            print(f"{Fore.YELLOW}‚ö†Ô∏è  Aucun mot de passe trouv√©")
    
    elif args.command == 'get':
        password_data = manager.get_password(args.id)
        if password_data:
            print(f"\n{Fore.CYAN}üîê D√âTAILS DU MOT DE PASSE")
            details = [
                ["Titre", password_data['title']],
                ["Utilisateur", password_data['username'] or "-"],
                ["Mot de passe", "*" * len(password_data['password'])],
                ["URL", password_data['url'] or "-"],
                ["Cat√©gorie", password_data['category']],
                ["Cr√©√© le", password_data['created_at']],
                ["Acc√®s", password_data['access_count']]
            ]
            print(tabulate(details, headers=["Champ", "Valeur"], tablefmt="grid"))
            
            if args.copy:
                manager.copy_to_clipboard(args.id)
        else:
            print(f"{Fore.RED}‚ùå Mot de passe introuvable")
    
    elif args.command == 'stats':
        stats = manager.get_statistics()
        if stats:
            print(f"\n{Fore.CYAN}üìä STATISTIQUES")
            
            print(f"\n{Fore.GREEN}Total: {stats['total_passwords']} mots de passe")
            
            if stats['by_category']:
                print(f"\n{Fore.CYAN}Par cat√©gorie:")
                cat_table = [[cat, count] for cat, count in stats['by_category']]
                print(tabulate(cat_table, headers=["Cat√©gorie", "Nombre"], tablefmt="grid"))
            
            if stats['most_accessed']:
                print(f"\n{Fore.CYAN}Plus utilis√©s:")
                access_table = [[title, count] for title, count in stats['most_accessed']]
                print(tabulate(access_table, headers=["Titre", "Acc√®s"], tablefmt="grid"))
    
    elif args.command == 'export':
        manager.export_data(args.filepath, include_passwords=args.include_passwords)
    
    # Commandes Cloud
    elif CLOUD_SYNC_AVAILABLE and args.command == 'cloud-config':
        manager.configure_cloud_service(args.service, args.client_id, args.client_secret)
    
    elif CLOUD_SYNC_AVAILABLE and args.command == 'cloud-auth':
        if args.callback_url:
            # Compl√©ter l'authentification avec l'URL de callback
            manager.complete_cloud_authentication(args.service, args.callback_url)
        else:
            # D√©marrer l'authentification
            auth_url = manager.authenticate_cloud_service(args.service)
            if auth_url:
                print(f"\n{Fore.CYAN}Apr√®s autorisation, ex√©cutez:")
                print(f"{Fore.GREEN}python gestionnaire_mdp.py cloud-auth {args.service} --callback-url=\"[URL_DE_CALLBACK]\"")
    
    elif CLOUD_SYNC_AVAILABLE and args.command == 'cloud-status':
        status = manager.get_cloud_services_status()
        
        if not status['available']:
            print(f"{Fore.RED}‚ùå Synchronisation cloud non disponible")
        else:
            print(f"\n{Fore.CYAN}‚òÅÔ∏è STATUS DES SERVICES CLOUD")
            print("=" * 40)
            
            table_data = []
            for service_name, service_status in status['services'].items():
                config_status = "‚úì" if service_status['configured'] else "‚ùå"
                enabled_status = "‚úì" if service_status['enabled'] else "‚ùå"
                auth_status = "‚úì" if service_status['authenticated'] else "‚ùå"
                
                table_data.append([
                    service_name.replace('_', ' ').title(),
                    config_status,
                    enabled_status,
                    auth_status
                ])
            
            print(tabulate(table_data, 
                         headers=["Service", "Configur√©", "Activ√©", "Authentifi√©"],
                         tablefmt="grid"))
            
            # Status de synchronisation
            sync_status = manager.get_cloud_sync_status()
            if sync_status.get('available'):
                print(f"\n{Fore.CYAN}üìä STATUT DE SYNCHRONISATION")
                sync_table = [
                    ["Derni√®re sync", sync_status.get('last_sync', 'Jamais')],
                    ["En cours", "Oui" if sync_status.get('is_syncing', False) else "Non"],
                    ["Auto-sync", "Activ√©" if sync_status.get('auto_sync_enabled', False) else "D√©sactiv√©"],
                    ["Services disponibles", str(len(sync_status.get('available_services', [])))]
                ]
                print(tabulate(sync_table, headers=["Param√®tre", "Valeur"], tablefmt="grid"))
    
    elif CLOUD_SYNC_AVAILABLE and args.command == 'cloud-sync':
        # V√©rifier l'authentification
        if not manager.check_session():
            master_password = getpass.getpass("Mot de passe ma√Ætre: ")
            if not manager.authenticate(master_password):
                print(f"{Fore.RED}‚ùå Authentification √©chou√©e")
                return
        
        manager.sync_to_cloud()
    
    elif CLOUD_SYNC_AVAILABLE and args.command == 'cloud-export':
        # V√©rifier l'authentification
        if not manager.check_session():
            master_password = getpass.getpass("Mot de passe ma√Ætre: ")
            if not manager.authenticate(master_password):
                print(f"{Fore.RED}‚ùå Authentification √©chou√©e")
                return
        
        manager.export_to_cloud()
    
    elif CLOUD_SYNC_AVAILABLE and args.command == 'cloud-import':
        # V√©rifier l'authentification
        if not manager.check_session():
            master_password = getpass.getpass("Mot de passe ma√Ætre: ")
            if not manager.authenticate(master_password):
                print(f"{Fore.RED}‚ùå Authentification √©chou√©e")
                return
        
        merge = not args.replace
        manager.import_from_cloud(merge=merge)
    
    else:
        parser.print_help()

if __name__ == "__main__":
    main()