#!/usr/bin/env python3
"""
D√©monstration du Syst√®me de Sauvegarde Chiffr√©

Script de d√©monstration interactive showcasant toutes les fonctionnalit√©s
du syst√®me de sauvegarde avec chiffrement AES, compression et rotation.

Auteur: Syst√®me de Cybers√©curit√©
Version: 1.0.0
Date: 2025-03-08
"""

import os
import sys
import json
import time
import shutil
import tempfile
from pathlib import Path
from datetime import datetime

# Ajouter le module principal au path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from sauvegarde_chiffree import (
    SystemeSauvegardeChiffre, formater_taille,
    afficher_liste_sauvegardes, afficher_statistiques
)
from colorama import init, Fore, Style

# Initialiser colorama
init(autoreset=True)


class DemonstrationsInteractives:
    """Classe pour g√©rer les d√©monstrations interactives"""
    
    def __init__(self):
        self.dossier_demo = None
        self.systeme = None
        self.config_demo = None
        self.mot_de_passe_demo = "De„É¢Password2025!"
        
    def setup_environnement_demo(self):
        """Cr√©er un environnement de d√©monstration complet"""
        print(f"{Fore.CYAN}üîß Configuration de l'environnement de d√©monstration...")
        
        # Cr√©er dossier temporaire pour la d√©mo
        self.dossier_demo = Path(tempfile.mkdtemp(prefix="demo_sauvegarde_"))
        print(f"üìÅ Dossier de d√©monstration: {self.dossier_demo}")
        
        # Cr√©er structure de donn√©es de test
        dossier_source = self.dossier_demo / "projet_exemple"
        dossier_backups = self.dossier_demo / "backups"
        
        dossier_source.mkdir(parents=True)
        dossier_backups.mkdir(parents=True)
        
        # Cr√©er une structure de projet r√©aliste
        self._creer_projet_exemple(dossier_source)
        
        # Configuration de d√©monstration
        self.config_demo = {
            "sauvegarde": {
                "dossier_source": str(dossier_source),
                "dossier_destination": str(dossier_backups),
                "nom_base": "demo_backup",
                "compression_niveau": 6,
                "chiffrement_actif": True,
                "exclusions": ["*.tmp", "*.log", "__pycache__", "node_modules", ".git"]
            },
            "rotation": {
                "max_sauvegardes": 5,
                "conservation_jours": 30,
                "rotation_auto": True
            },
            "securite": {
                "iterations_pbkdf2": 10000,  # R√©duit pour la d√©mo
                "longueur_salt": 32,
                "verification_integrite": True,
                "effacement_securise": True
            },
            "planning": {
                "actif": False,
                "frequence": "daily",
                "heure": "02:00"
            },
            "avance": {
                "sauvegarde_incrementale": False,
                "compression_adaptive": True,
                "parallele": True,
                "max_workers": 2
            }
        }
        
        # Sauvegarder la configuration
        config_file = self.dossier_demo / "config_demo.json"
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(self.config_demo, f, indent=2, ensure_ascii=False)
        
        # Initialiser le syst√®me
        self.systeme = SystemeSauvegardeChiffre(str(config_file))
        
        print(f"{Fore.GREEN}‚úÖ Environnement de d√©monstration configur√©!")
        return dossier_source
    
    def _creer_projet_exemple(self, dossier_source):
        """Cr√©er un projet exemple r√©aliste"""
        print(f"{Fore.YELLOW}üìù Cr√©ation d'un projet exemple...")
        
        # Structure de dossiers
        dossiers = [
            "src", "docs", "tests", "config", "assets/images", 
            "assets/styles", "logs", "temp", "build"
        ]
        
        for dossier in dossiers:
            (dossier_source / dossier).mkdir(parents=True, exist_ok=True)
        
        # Fichiers de code source
        (dossier_source / "src" / "main.py").write_text("""#!/usr/bin/env python3
\"\"\"
Application principale du projet de d√©monstration
\"\"\"

import os
import sys
from datetime import datetime

class ApplicationDemo:
    def __init__(self):
        self.nom = "Projet D√©monstration"
        self.version = "1.0.0"
        self.auteur = "√âquipe de D√©veloppement"
    
    def demarrer(self):
        print(f"üöÄ D√©marrage de {self.nom} v{self.version}")
        print(f"üë§ Auteur: {self.auteur}")
        print(f"üìÖ Heure: {datetime.now()}")
        
        return "Application d√©marr√©e avec succ√®s!"
    
    def traiter_donnees(self, donnees):
        \"\"\"Traiter un ensemble de donn√©es\"\"\"
        resultats = []
        for item in donnees:
            if isinstance(item, (int, float)):
                resultats.append(item * 2)
            elif isinstance(item, str):
                resultats.append(item.upper())
            else:
                resultats.append(str(item))
        return resultats

if __name__ == "__main__":
    app = ApplicationDemo()
    print(app.demarrer())
    
    # Test avec des donn√©es exemple
    test_data = [1, 2, 3, "hello", "world", 4.5]
    results = app.traiter_donnees(test_data)
    print(f"R√©sultats: {results}")
""" * 3)  # R√©p√©ter pour avoir plus de contenu
        
        (dossier_source / "src" / "utils.py").write_text("""#!/usr/bin/env python3
\"\"\"
Utilitaires pour le projet de d√©monstration
\"\"\"

import hashlib
import json
from pathlib import Path

def calculer_hash_fichier(chemin_fichier):
    \"\"\"Calculer le hash SHA-256 d'un fichier\"\"\"
    hash_sha256 = hashlib.sha256()
    with open(chemin_fichier, 'rb') as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_sha256.update(chunk)
    return hash_sha256.hexdigest()

def sauvegarder_json(donnees, fichier):
    \"\"\"Sauvegarder des donn√©es en JSON\"\"\"
    with open(fichier, 'w', encoding='utf-8') as f:
        json.dump(donnees, f, indent=2, ensure_ascii=False)

def charger_json(fichier):
    \"\"\"Charger des donn√©es depuis JSON\"\"\"
    with open(fichier, 'r', encoding='utf-8') as f:
        return json.load(f)

class ConfigurationManager:
    def __init__(self, config_file="config.json"):
        self.config_file = Path(config_file)
        self.config = self._charger_config()
    
    def _charger_config(self):
        if self.config_file.exists():
            return charger_json(self.config_file)
        return self._config_par_defaut()
    
    def _config_par_defaut(self):
        return {
            "debug": True,
            "port": 8080,
            "host": "localhost",
            "database": {
                "type": "sqlite",
                "name": "demo.db"
            }
        }
    
    def sauvegarder(self):
        sauvegarder_json(self.config, self.config_file)
""" * 2)
        
        # Fichiers de configuration
        (dossier_source / "config" / "app.json").write_text(json.dumps({
            "application": {
                "nom": "Projet D√©monstration Sauvegarde",
                "version": "1.0.0",
                "description": "Projet exemple pour d√©montrer le syst√®me de sauvegarde chiffr√©"
            },
            "database": {
                "type": "sqlite",
                "host": "localhost",
                "port": 5432,
                "name": "demo_database"
            },
            "logging": {
                "level": "INFO",
                "file": "logs/application.log",
                "max_size": "10MB",
                "retention": 30
            },
            "security": {
                "encryption": True,
                "hash_algorithm": "SHA-256",
                "session_timeout": 3600
            }
        }, indent=2))
        
        (dossier_source / "config" / "development.ini").write_text("""[DEFAULT]
debug = true
port = 8080
host = localhost

[database]
url = sqlite:///demo.db
pool_size = 10
echo = false

[logging]
level = DEBUG
format = %(asctime)s - %(name)s - %(levelname)s - %(message)s

[security]
secret_key = demo-secret-key-change-in-production
session_lifetime = 86400
""")
        
        # Documentation
        (dossier_source / "docs" / "README.md").write_text("""# Projet de D√©monstration - Syst√®me de Sauvegarde Chiffr√©

## Description
Ce projet sert d'exemple pour d√©montrer les capacit√©s du syst√®me de sauvegarde chiffr√©.
Il contient une structure typique d'application avec du code source, des configurations,
des tests et de la documentation.

## Structure du Projet
```
projet_exemple/
‚îú‚îÄ‚îÄ src/           # Code source principal
‚îú‚îÄ‚îÄ docs/          # Documentation  
‚îú‚îÄ‚îÄ tests/         # Tests unitaires
‚îú‚îÄ‚îÄ config/        # Fichiers de configuration
‚îú‚îÄ‚îÄ assets/        # Ressources (images, styles)
‚îú‚îÄ‚îÄ logs/          # Fichiers de logs (exclus des sauvegardes)
‚îú‚îÄ‚îÄ temp/          # Fichiers temporaires (exclus)
‚îî‚îÄ‚îÄ build/         # Fichiers de build
```

## Fonctionnalit√©s
- ‚úÖ Application principale avec traitement de donn√©es
- ‚úÖ Utilitaires et gestionnaires de configuration  
- ‚úÖ Tests unitaires complets
- ‚úÖ Documentation d√©taill√©e
- ‚úÖ Configuration multi-environnement

## Installation
```bash
pip install -r requirements.txt
python src/main.py
```

## Tests
```bash
python -m pytest tests/
```

## Contribution
1. Fork le projet
2. Cr√©er une branche feature
3. Committer les changements
4. Pousser vers la branche
5. Ouvrir une Pull Request

## Licence
MIT License - Voir LICENSE pour plus de d√©tails
""" * 2)
        
        (dossier_source / "docs" / "ARCHITECTURE.md").write_text("""# Architecture du Syst√®me

## Vue d'ensemble
L'architecture suit le pattern MVC (Model-View-Controller) avec s√©paration claire des responsabilit√©s.

## Components Principaux

### 1. Application Layer (`src/main.py`)
- Point d'entr√©e principal
- Orchestration des composants
- Gestion du cycle de vie

### 2. Utilities Layer (`src/utils.py`)
- Fonctions utilitaires communes
- Gestionnaire de configuration
- Helpers pour fichiers et donn√©es

### 3. Configuration Layer (`config/`)
- Param√®tres d'application
- Configuration par environnement
- Gestion des secrets (en production)

### 4. Tests Layer (`tests/`)
- Tests unitaires
- Tests d'int√©gration
- Mocks et fixtures

## Flux de Donn√©es
1. **Entr√©e** ‚Üí Application re√ßoit les donn√©es
2. **Traitement** ‚Üí Utilitaires transforment les donn√©es
3. **Stockage** ‚Üí Sauvegarde dans la configuration
4. **Sortie** ‚Üí R√©sultats format√©s

## S√©curit√©
- Chiffrement des donn√©es sensibles
- Validation d'entr√©e
- Audit trail
- Gestion des sessions

## Performance
- Cache des configurations
- Traitement asynchrone
- Pooling des connexions
- Monitoring des m√©triques
""")
        
        # Tests
        (dossier_source / "tests" / "test_main.py").write_text("""#!/usr/bin/env python3
import unittest
import sys
from pathlib import Path

# Ajouter src au path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from main import ApplicationDemo

class TestApplicationDemo(unittest.TestCase):
    def setUp(self):
        self.app = ApplicationDemo()
    
    def test_creation_application(self):
        self.assertEqual(self.app.nom, "Projet D√©monstration")
        self.assertEqual(self.app.version, "1.0.0")
    
    def test_demarrage(self):
        resultat = self.app.demarrer()
        self.assertIn("succ√®s", resultat)
    
    def test_traitement_donnees_numeriques(self):
        donnees = [1, 2, 3]
        resultats = self.app.traiter_donnees(donnees)
        self.assertEqual(resultats, [2, 4, 6])
    
    def test_traitement_donnees_texte(self):
        donnees = ["hello", "world"]
        resultats = self.app.traiter_donnees(donnees)
        self.assertEqual(resultats, ["HELLO", "WORLD"])
    
    def test_traitement_donnees_mixtes(self):
        donnees = [1, "test", 2.5]
        resultats = self.app.traiter_donnees(donnees)
        self.assertEqual(resultats, [2, "TEST", 5.0])

if __name__ == "__main__":
    unittest.main()
""")
        
        (dossier_source / "tests" / "test_utils.py").write_text("""#!/usr/bin/env python3
import unittest
import tempfile
import json
from pathlib import Path
import sys

sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from utils import calculer_hash_fichier, sauvegarder_json, charger_json, ConfigurationManager

class TestUtils(unittest.TestCase):
    def setUp(self):
        self.temp_dir = Path(tempfile.mkdtemp())
    
    def tearDown(self):
        import shutil
        shutil.rmtree(self.temp_dir)
    
    def test_hash_fichier(self):
        fichier_test = self.temp_dir / "test.txt"
        fichier_test.write_text("contenu de test")
        
        hash1 = calculer_hash_fichier(fichier_test)
        hash2 = calculer_hash_fichier(fichier_test)
        
        self.assertEqual(hash1, hash2)
        self.assertEqual(len(hash1), 64)  # SHA-256
    
    def test_sauvegarde_chargement_json(self):
        donnees = {"test": "valeur", "nombre": 42}
        fichier = self.temp_dir / "test.json"
        
        sauvegarder_json(donnees, fichier)
        donnees_chargees = charger_json(fichier)
        
        self.assertEqual(donnees, donnees_chargees)
    
    def test_configuration_manager(self):
        config_file = self.temp_dir / "config.json"
        manager = ConfigurationManager(config_file)
        
        # Configuration par d√©faut
        self.assertTrue(manager.config["debug"])
        self.assertEqual(manager.config["port"], 8080)
        
        # Modification et sauvegarde
        manager.config["debug"] = False
        manager.sauvegarder()
        
        # Rechargement
        manager2 = ConfigurationManager(config_file)
        self.assertFalse(manager2.config["debug"])

if __name__ == "__main__":
    unittest.main()
""")
        
        # Assets
        (dossier_source / "assets" / "styles" / "main.css").write_text("""/* Styles principaux pour l'application de d√©monstration */

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 20px;
    background-color: #f4f4f4;
    color: #333;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    background: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 0 20px rgba(0,0,0,0.1);
}

h1, h2, h3 {
    color: #2c3e50;
    margin-bottom: 20px;
}

.header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 20px;
    border-radius: 5px;
    margin-bottom: 30px;
}

.button {
    background-color: #3498db;
    color: white;
    padding: 12px 24px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s;
}

.button:hover {
    background-color: #2980b9;
}

.status {
    padding: 15px;
    border-radius: 5px;
    margin: 10px 0;
}

.status.success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.status.error {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}

.status.warning {
    background-color: #fff3cd;
    color: #856404;
    border: 1px solid #ffeaa7;
}

.card {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    margin-bottom: 20px;
}

.progress-bar {
    width: 100%;
    height: 24px;
    background-color: #e0e0e0;
    border-radius: 12px;
    overflow: hidden;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #00d2ff 0%, #3a7bd5 100%);
    transition: width 0.3s ease;
}

@media (max-width: 768px) {
    .container {
        padding: 15px;
        margin: 10px;
    }
    
    .button {
        width: 100%;
        margin-bottom: 10px;
    }
}
""")
        
        # Fichiers de build et temporaires (√† exclure)
        (dossier_source / "build" / "output.js").write_text("// Fichier de build g√©n√©r√© automatiquement")
        (dossier_source / "temp" / "cache.tmp").write_text("Fichier cache temporaire")
        (dossier_source / "logs" / "debug.log").write_text("2025-03-08 10:00:00 - DEBUG - Application started")
        
        # Fichiers suppl√©mentaires pour augmenter la taille
        for i in range(5):
            (dossier_source / f"docs" / f"documentation_{i+1}.md").write_text(f"""# Documentation {i+1}

## Section {i+1}.1
Contenu de la documentation partie {i+1}. Cette section contient des informations
importantes sur le fonctionnement du syst√®me.

### Sous-section {i+1}.1.1
D√©tails techniques et impl√©mentation.

### Sous-section {i+1}.1.2  
Exemples et cas d'usage.

## Section {i+1}.2
Informations suppl√©mentaires et r√©f√©rences.
""" * 20)  # R√©p√©ter pour avoir plus de contenu
        
        print(f"{Fore.GREEN}‚úÖ Projet exemple cr√©√© avec succ√®s!")
        
        # Afficher statistiques du projet cr√©√©
        taille_totale = sum(f.stat().st_size for f in dossier_source.rglob('*') if f.is_file())
        nombre_fichiers = len([f for f in dossier_source.rglob('*') if f.is_file()])
        nombre_dossiers = len([d for d in dossier_source.rglob('*') if d.is_dir()])
        
        print(f"üìä Statistiques du projet:")
        print(f"   ‚Ä¢ Fichiers: {nombre_fichiers}")
        print(f"   ‚Ä¢ Dossiers: {nombre_dossiers}")  
        print(f"   ‚Ä¢ Taille totale: {formater_taille(taille_totale)}")
    
    def demonstration_creation_sauvegarde(self):
        """D√©monstration de cr√©ation de sauvegarde"""
        print(f"\n{Fore.CYAN}{'='*60}")
        print(f"{Fore.CYAN}üîÑ D√âMONSTRATION: Cr√©ation de Sauvegarde Chiffr√©e")
        print(f"{Fore.CYAN}{'='*60}")
        
        print(f"\n{Fore.YELLOW}üìù Param√®tres de sauvegarde:")
        print(f"   ‚Ä¢ Source: {self.systeme.config['sauvegarde']['dossier_source']}")
        print(f"   ‚Ä¢ Destination: {self.systeme.config['sauvegarde']['dossier_destination']}")
        print(f"   ‚Ä¢ Chiffrement: {'‚úÖ Activ√©' if self.systeme.config['sauvegarde']['chiffrement_actif'] else '‚ùå D√©sactiv√©'}")
        print(f"   ‚Ä¢ Compression: Niveau {self.systeme.config['sauvegarde']['compression_niveau']}")
        print(f"   ‚Ä¢ Exclusions: {', '.join(self.systeme.config['sauvegarde']['exclusions'])}")
        
        input(f"\n{Fore.MAGENTA}üéØ Appuyez sur Entr√©e pour commencer la sauvegarde...")
        
        # Cr√©er la sauvegarde
        debut = time.time()
        metadonnees = self.systeme.creer_sauvegarde(mot_de_passe=self.mot_de_passe_demo)
        fin = time.time()
        
        if metadonnees:
            print(f"\n{Fore.GREEN}‚úÖ Sauvegarde cr√©√©e avec succ√®s!")
            print(f"\nüìä R√©sum√© de la sauvegarde:")
            
            # Calculer le ratio de compression
            ratio_compression = (1 - metadonnees.taille_compressee / metadonnees.taille_originale) * 100 if metadonnees.taille_originale > 0 else 0
            
            donnees_resume = [
                ["ID de sauvegarde", metadonnees.id],
                ["Nom du fichier", metadonnees.nom_fichier],
                ["Taille originale", formater_taille(metadonnees.taille_originale)],
                ["Taille compress√©e", formater_taille(metadonnees.taille_compressee)],
                ["Taille chiffr√©e", formater_taille(metadonnees.taille_chiffree)],
                ["Ratio compression", f"{ratio_compression:.1f}%"],
                ["Fichiers inclus", f"{metadonnees.fichiers_inclus:,}"],
                ["Dossiers inclus", f"{metadonnees.dossiers_inclus:,}"],
                ["Dur√©e", f"{metadonnees.duree_sauvegarde:.2f}s"],
                ["Hash d'int√©grit√©", metadonnees.hash_integrite[:16] + "..." if metadonnees.hash_integrite else "N/A"],
                ["Chiffr√©", "üîí Oui" if metadonnees.chiffre else "üîì Non"],
                ["Date/Heure", metadonnees.timestamp.strftime("%Y-%m-%d %H:%M:%S")]
            ]
            
            from tabulate import tabulate
            print(tabulate(donnees_resume, headers=["Attribut", "Valeur"], tablefmt="grid"))
            
            return metadonnees
        else:
            print(f"{Fore.RED}‚ùå √âchec de la cr√©ation de sauvegarde!")
            return None
    
    def demonstration_liste_et_statistiques(self):
        """D√©monstration de listage et statistiques"""
        print(f"\n{Fore.CYAN}{'='*60}")
        print(f"{Fore.CYAN}üìã D√âMONSTRATION: Liste et Statistiques")
        print(f"{Fore.CYAN}{'='*60}")
        
        # Lister les sauvegardes
        sauvegardes = self.systeme.lister_sauvegardes()
        afficher_liste_sauvegardes(sauvegardes)
        
        # Afficher les statistiques
        stats = self.systeme.obtenir_statistiques()
        afficher_statistiques(stats)
        
        if sauvegardes:
            return sauvegardes[0]  # Retourner la plus r√©cente
        return None
    
    def demonstration_restauration(self, metadonnees):
        """D√©monstration de restauration"""
        if not metadonnees:
            print(f"{Fore.YELLOW}‚ö†Ô∏è Aucune sauvegarde disponible pour la restauration")
            return
        
        print(f"\n{Fore.CYAN}{'='*60}")
        print(f"{Fore.CYAN}üîÑ D√âMONSTRATION: Restauration de Sauvegarde")
        print(f"{Fore.CYAN}{'='*60}")
        
        print(f"\n{Fore.YELLOW}üìù Param√®tres de restauration:")
        print(f"   ‚Ä¢ ID de sauvegarde: {metadonnees.id}")
        print(f"   ‚Ä¢ Fichier source: {metadonnees.nom_fichier}")
        print(f"   ‚Ä¢ Chiffrement: {'üîí Oui' if metadonnees.chiffre else 'üîì Non'}")
        print(f"   ‚Ä¢ Date de cr√©ation: {metadonnees.timestamp.strftime('%Y-%m-%d %H:%M:%S')}")
        
        dossier_restauration = self.dossier_demo / f"restauration_{metadonnees.id}"
        print(f"   ‚Ä¢ Destination: {dossier_restauration}")
        
        input(f"\n{Fore.MAGENTA}üéØ Appuyez sur Entr√©e pour commencer la restauration...")
        
        # Effectuer la restauration
        succes = self.systeme.restaurer_sauvegarde(
            metadonnees.id,
            mot_de_passe=self.mot_de_passe_demo if metadonnees.chiffre else None,
            dossier_destination=str(dossier_restauration)
        )
        
        if succes:
            print(f"\n{Fore.GREEN}‚úÖ Restauration termin√©e avec succ√®s!")
            
            # V√©rifier les fichiers restaur√©s
            fichiers_restaures = list(dossier_restauration.rglob('*'))
            fichiers_seulement = [f for f in fichiers_restaures if f.is_file()]
            dossiers_seulement = [d for d in fichiers_restaures if d.is_dir()]
            
            print(f"\nüìä R√©sum√© de la restauration:")
            donnees_restauration = [
                ["Dossier de destination", str(dossier_restauration)],
                ["Fichiers restaur√©s", f"{len(fichiers_seulement):,}"],
                ["Dossiers restaur√©s", f"{len(dossiers_seulement):,}"],
                ["Taille totale", formater_taille(sum(f.stat().st_size for f in fichiers_seulement))]
            ]
            
            from tabulate import tabulate
            print(tabulate(donnees_restauration, headers=["Attribut", "Valeur"], tablefmt="grid"))
            
            # Afficher quelques fichiers restaur√©s
            print(f"\n{Fore.YELLOW}üìÅ Aper√ßu des fichiers restaur√©s (premiers 10):")
            for i, fichier in enumerate(fichiers_seulement[:10]):
                chemin_relatif = fichier.relative_to(dossier_restauration)
                taille = formater_taille(fichier.stat().st_size)
                print(f"   {i+1:2d}. {chemin_relatif} ({taille})")
            
            if len(fichiers_seulement) > 10:
                print(f"   ... et {len(fichiers_seulement) - 10} fichiers suppl√©mentaires")
            
            return True
        else:
            print(f"{Fore.RED}‚ùå √âchec de la restauration!")
            return False
    
    def demonstration_rotation(self):
        """D√©monstration de la rotation automatique"""
        print(f"\n{Fore.CYAN}{'='*60}")
        print(f"{Fore.CYAN}üîÑ D√âMONSTRATION: Rotation Automatique")
        print(f"{Fore.CYAN}{'='*60}")
        
        print(f"\n{Fore.YELLOW}üìù Configuration de rotation:")
        print(f"   ‚Ä¢ Maximum de sauvegardes: {self.systeme.config['rotation']['max_sauvegardes']}")
        print(f"   ‚Ä¢ Conservation en jours: {self.systeme.config['rotation']['conservation_jours']}")
        print(f"   ‚Ä¢ Rotation automatique: {'‚úÖ Activ√©e' if self.systeme.config['rotation']['rotation_auto'] else '‚ùå D√©sactiv√©e'}")
        
        # Afficher l'√©tat actuel
        sauvegardes_avant = self.systeme.lister_sauvegardes()
        print(f"\nüìä √âtat actuel: {len(sauvegardes_avant)} sauvegarde(s)")
        
        if len(sauvegardes_avant) < self.systeme.config['rotation']['max_sauvegardes']:
            print(f"\n{Fore.YELLOW}üîÑ Cr√©ation de sauvegardes suppl√©mentaires pour d√©montrer la rotation...")
            
            # Cr√©er des sauvegardes suppl√©mentaires
            for i in range(3):
                print(f"   Cr√©ation de la sauvegarde {i+1}/3...")
                metadonnees = self.systeme.creer_sauvegarde()
                if metadonnees:
                    print(f"   ‚úÖ Sauvegarde {metadonnees.id} cr√©√©e")
                time.sleep(1)  # Petit d√©lai pour diff√©rencier les timestamps
        
        # Afficher l'√©tat apr√®s rotation
        sauvegardes_apres = self.systeme.lister_sauvegardes()
        print(f"\nüìä √âtat apr√®s rotation: {len(sauvegardes_apres)} sauvegarde(s)")
        
        if len(sauvegardes_apres) <= self.systeme.config['rotation']['max_sauvegardes']:
            print(f"{Fore.GREEN}‚úÖ Rotation automatique fonctionnelle!")
        
        afficher_liste_sauvegardes(sauvegardes_apres)
    
    def demonstration_fonctionnalites_avancees(self):
        """D√©monstration des fonctionnalit√©s avanc√©es"""
        print(f"\n{Fore.CYAN}{'='*60}")
        print(f"{Fore.CYAN}‚öôÔ∏è D√âMONSTRATION: Fonctionnalit√©s Avanc√©es")
        print(f"{Fore.CYAN}{'='*60}")
        
        # Test des diff√©rents niveaux de compression
        print(f"\n{Fore.YELLOW}üóúÔ∏è Test des niveaux de compression:")
        
        niveaux_test = [1, 6, 9]  # Rapide, √©quilibr√©, maximum
        resultats_compression = []
        
        for niveau in niveaux_test:
            print(f"   üìä Test compression niveau {niveau}...")
            
            # Modifier temporairement la configuration
            niveau_original = self.systeme.config['sauvegarde']['compression_niveau']
            self.systeme.config['sauvegarde']['compression_niveau'] = niveau
            self.systeme.compression.niveau = niveau
            
            # Cr√©er une sauvegarde test
            debut = time.time()
            metadonnees = self.systeme.creer_sauvegarde()
            fin = time.time()
            
            if metadonnees:
                ratio = (1 - metadonnees.taille_compressee / metadonnees.taille_originale) * 100
                resultats_compression.append([
                    f"Niveau {niveau}",
                    formater_taille(metadonnees.taille_originale),
                    formater_taille(metadonnees.taille_compressee),
                    f"{ratio:.1f}%",
                    f"{fin - debut:.2f}s"
                ])
            
            # Restaurer la configuration
            self.systeme.config['sauvegarde']['compression_niveau'] = niveau_original
            self.systeme.compression.niveau = niveau_original
        
        if resultats_compression:
            from tabulate import tabulate
            print(f"\nüìä R√©sultats des tests de compression:")
            headers = ["Niveau", "Taille Orig.", "Taille Comp.", "Ratio", "Dur√©e"]
            print(tabulate(resultats_compression, headers=headers, tablefmt="grid"))
        
        # Test de v√©rification d'int√©grit√©
        print(f"\n{Fore.YELLOW}üîç Test de v√©rification d'int√©grit√©:")
        
        sauvegardes = self.systeme.lister_sauvegardes(limite=1)
        if sauvegardes and sauvegardes[0].hash_integrite:
            sauvegarde = sauvegardes[0]
            print(f"   ‚Ä¢ Sauvegarde: {sauvegarde.id}")
            print(f"   ‚Ä¢ Hash stock√©: {sauvegarde.hash_integrite[:32]}...")
            print(f"   {Fore.GREEN}‚úÖ Hash d'int√©grit√© disponible - V√©rification automatique lors de la restauration")
        else:
            print(f"   {Fore.YELLOW}‚ö†Ô∏è Aucune sauvegarde avec hash d'int√©grit√© trouv√©e")
        
        # Information sur les exclusions
        print(f"\n{Fore.YELLOW}üö´ Configuration des exclusions:")
        exclusions = self.systeme.config['sauvegarde']['exclusions']
        for exclusion in exclusions:
            print(f"   ‚Ä¢ {exclusion}")
        
        print(f"\n{Fore.GREEN}‚úÖ D√©monstration des fonctionnalit√©s avanc√©es termin√©e!")
    
    def cleanup(self):
        """Nettoyer les fichiers de d√©monstration"""
        if self.dossier_demo and self.dossier_demo.exists():
            try:
                shutil.rmtree(self.dossier_demo)
                print(f"{Fore.GREEN}üßπ Environnement de d√©monstration nettoy√©")
            except Exception as e:
                print(f"{Fore.YELLOW}‚ö†Ô∏è Erreur lors du nettoyage: {e}")


def demo_rapide():
    """D√©monstration rapide et automatis√©e"""
    print(f"{Fore.CYAN}{'='*80}")
    print(f"{Fore.CYAN}üöÄ D√âMONSTRATION RAPIDE - Syst√®me de Sauvegarde Chiffr√©")
    print(f"{Fore.CYAN}{'='*80}")
    
    demo = DemonstrationsInteractives()
    
    try:
        # Setup
        demo.setup_environnement_demo()
        
        # Cr√©er quelques sauvegardes
        print(f"\n{Fore.YELLOW}üîÑ Cr√©ation de sauvegardes de d√©monstration...")
        for i in range(3):
            print(f"   Sauvegarde {i+1}/3...")
            metadonnees = demo.systeme.creer_sauvegarde(mot_de_passe=demo.mot_de_passe_demo)
            if metadonnees:
                print(f"   ‚úÖ ID: {metadonnees.id}")
            time.sleep(0.5)
        
        # Statistiques finales
        print(f"\n{Fore.CYAN}üìä R√âSUM√â FINAL")
        print(f"{Fore.CYAN}{'='*40}")
        
        sauvegardes = demo.systeme.lister_sauvegardes()
        stats = demo.systeme.obtenir_statistiques()
        
        donnees_finales = [
            ["Sauvegardes cr√©√©es", f"{len(sauvegardes):,}"],
            ["Taille totale sauvegard√©e", formater_taille(stats.taille_totale)],
            ["Taille originale totale", formater_taille(stats.taille_originale_totale)],
            ["Ratio compression moyen", f"{stats.ratio_compression_moyen:.1f}%"],
            ["Dur√©e moyenne par sauvegarde", f"{stats.duree_moyenne:.2f}s"],
            ["Derni√®re sauvegarde", stats.derniere_sauvegarde.strftime('%H:%M:%S') if stats.derniere_sauvegarde else "N/A"]
        ]
        
        from tabulate import tabulate
        print(tabulate(donnees_finales, headers=["M√©trique", "Valeur"], tablefmt="grid"))
        
        print(f"\n{Fore.GREEN}‚úÖ D√©monstration rapide termin√©e avec succ√®s!")
        
    except Exception as e:
        print(f"{Fore.RED}‚ùå Erreur lors de la d√©monstration: {e}")
    finally:
        demo.cleanup()


def demo_interactive():
    """D√©monstration interactive compl√®te"""
    print(f"{Fore.CYAN}{'='*80}")
    print(f"{Fore.CYAN}üéÆ D√âMONSTRATION INTERACTIVE - Syst√®me de Sauvegarde Chiffr√©")
    print(f"{Fore.CYAN}{'='*80}")
    
    print(f"\n{Fore.YELLOW}Cette d√©monstration vous guidera √† travers toutes les fonctionnalit√©s:")
    print(f"‚úÖ Cr√©ation d'un projet exemple")
    print(f"‚úÖ Sauvegarde avec chiffrement AES-256")
    print(f"‚úÖ Compression intelligente")
    print(f"‚úÖ Gestion des exclusions")
    print(f"‚úÖ Rotation automatique")
    print(f"‚úÖ Restauration compl√®te")
    print(f"‚úÖ Statistiques d√©taill√©es")
    print(f"‚úÖ Fonctionnalit√©s avanc√©es")
    
    reponse = input(f"\n{Fore.MAGENTA}üöÄ Voulez-vous continuer? (o/N): ").lower().strip()
    if reponse not in ['o', 'oui', 'y', 'yes']:
        print(f"{Fore.YELLOW}üëã D√©monstration annul√©e")
        return
    
    demo = DemonstrationsInteractives()
    
    try:
        # 1. Setup environnement
        demo.setup_environnement_demo()
        input(f"\n{Fore.MAGENTA}üìã Environnement pr√™t. Appuyez sur Entr√©e pour continuer...")
        
        # 2. Cr√©ation de sauvegarde
        metadonnees = demo.demonstration_creation_sauvegarde()
        
        # 3. Liste et statistiques
        if metadonnees:
            input(f"\n{Fore.MAGENTA}üìä Appuyez sur Entr√©e pour voir la liste et les statistiques...")
            sauvegarde_recente = demo.demonstration_liste_et_statistiques()
            
            # 4. Restauration
            input(f"\n{Fore.MAGENTA}üîÑ Appuyez sur Entr√©e pour d√©montrer la restauration...")
            demo.demonstration_restauration(sauvegarde_recente)
            
            # 5. Rotation
            input(f"\n{Fore.MAGENTA}üîÑ Appuyez sur Entr√©e pour d√©montrer la rotation...")
            demo.demonstration_rotation()
            
            # 6. Fonctionnalit√©s avanc√©es
            input(f"\n{Fore.MAGENTA}‚öôÔ∏è Appuyez sur Entr√©e pour les fonctionnalit√©s avanc√©es...")
            demo.demonstration_fonctionnalites_avancees()
        
        print(f"\n{Fore.GREEN}üåü D√©monstration interactive termin√©e avec succ√®s!")
        print(f"{Fore.CYAN}üí° Le syst√®me de sauvegarde chiffr√© est pr√™t pour la production!")
        
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}‚èπÔ∏è D√©monstration interrompue par l'utilisateur")
    except Exception as e:
        print(f"{Fore.RED}‚ùå Erreur lors de la d√©monstration: {e}")
    finally:
        demo.cleanup()


def demo_complet():
    """Point d'entr√©e principal pour les d√©monstrations"""
    print(f"{Fore.CYAN}üéØ SYST√àME DE SAUVEGARDE CHIFFR√â - D√©monstrations")
    print(f"{Fore.CYAN}{'='*60}")
    
    print(f"\n{Fore.YELLOW}Choisissez le type de d√©monstration:")
    print(f"1. üöÄ D√©monstration rapide (automatique)")
    print(f"2. üéÆ D√©monstration interactive (guid√©e)")
    print(f"3. ‚ùå Quitter")
    
    while True:
        choix = input(f"\n{Fore.MAGENTA}Votre choix (1-3): ").strip()
        
        if choix == '1':
            demo_rapide()
            break
        elif choix == '2':
            demo_interactive()
            break
        elif choix == '3':
            print(f"{Fore.YELLOW}üëã Au revoir!")
            break
        else:
            print(f"{Fore.RED}‚ùå Choix invalide. Veuillez entrer 1, 2 ou 3.")


if __name__ == "__main__":
    demo_complet()